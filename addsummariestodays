#!/usr/bin/env bash

# Check for exactly two arguments
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <startday> <endday>"
  exit 1
fi

# Resolve script directory
if command -v realpath > /dev/null 2>&1; then
  SCRIPT_DIR=$(dirname "$(realpath "$0")")
else
  SCRIPT_DIR=$(cd -- "$(dirname -- "$0")" && pwd -P)
fi
source "${SCRIPT_DIR}/lockconfig.sh"
lock_config_vars "${SCRIPT_DIR}/config.env"
# Check if YEAR is set
if [ -z "$YEAR" ]; then
  echo "Error: YEAR environment variable is not set."
  exit 1
fi

startday=$1
endday=$2

# Validate input
if ! [[ "$startday" =~ ^[0-9]+$ && "$endday" =~ ^[0-9]+$ ]]; then
  echo "Both startday and endday must be numeric."
  exit 1
fi

if [ "$endday" -lt "$startday" ]; then
  echo "endday must be greater than or equal to startday."
  exit 1
fi

# Check if videos.txt exists
if [ ! -f "videos.txt" ]; then
  echo "Error: videos.txt not found."
  exit 1
fi

# Get number of lines in the file
total_lines=$(wc -l < videos.txt)

# Adjust endday if it exceeds total lines
if [ "$endday" -gt "$total_lines" ]; then
  echo "Warning: endday ($endday) exceeds total lines ($total_lines). Adjusting to $total_lines."
  endday=$total_lines
fi

# Process lines
lineno=$startday
sed -n "${startday},${endday}p" videos.txt | while read -r videoid; do
  if [ -n "$videoid" ]; then
    filename="Day$(printf "%03d" "$lineno").md"

    # Calculate month name using date and YEAR
    month=$(date -d "${YEAR}-01-01 +$((lineno - 1)) days" +%B)
    filepath="$month/$filename"
    response='y'
    if [ -f "$filepath" ]; then
      grep "AI-Generated Summary:" "$filepath" &> /dev/null && read -r -p "$filepath already contains AI-Generated Summary. AI-Generated summaries can differ from each other. The process isn't deterministic. Generate new one (Yy/Nn)?" response
      [[ "$response" == Y* ]] || [[ "$response" == y* ]] \
        && echo "Backing up file to ${filepath}.bak ..." \
        && cp "$filepath" "${filepath}.bak" \
        && tempfile="$(mktemp)" \
        && awk '
/^### AI-Generated Summary:/ { in_block = 1; next }
/^### / && in_block { in_block = 0 }
!in_block
' "$filepath" > "$tempfile" && mv "$tempfile" "$filepath"
      [[ "$response" == Y* ]] || [[ "$response" == y* ]] \
        && echo "Appending to $filepath (Day $lineno, $videoid)" \
        && echo "" >> "$filepath" \
        && ./summarizevideo -- "$videoid" >> "$filepath"
    else
      echo "Warning: $filepath not found. Skipping videoid $videoid (line $lineno)."
    fi
  fi
  lineno=$((lineno + 1))
  if [[ "$lineno" -le "$endday" ]]; then
    echo "Waiting for 10 seconds before processing next day's video..."
    sleep 10
  fi
done
