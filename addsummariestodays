#!/usr/bin/env bash

# Script to add AI-generated summaries to daily markdown files for a range of days
# Usage: addsummariestodays <startday> <endday>

set -o errexit
set -o nounset
set -o pipefail

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Error codes
readonly E_INVALID_ARGS=1
readonly E_INVALID_DAY_RANGE=2
readonly E_MISSING_YEAR=3
readonly E_NO_INTERNET=4
readonly E_MISSING_VIDEOS_FILE=5
readonly E_INVALID_AI_HANDLING=6
readonly E_MISSING_FILE=7

function usage() {
  cat << EOF
Usage: ${SCRIPT_NAME} [options] <startday> <endday>

Add AI-generated summaries to daily markdown files for a range of days.

Arguments:
  startday    First day number to process (1-based index)
  endday      Last day number to process (inclusive)

Options:
  --ai-handling=MODE    How to handle existing AI summaries (overwrite|skip|prompt)
  -d, --debug           Enable debug mode
  -h, --help            Show this help message
  --version             Show version information

Exit Codes:
  ${E_INVALID_ARGS} - Invalid arguments
  ${E_INVALID_DAY_RANGE} - Invalid day range
  ${E_MISSING_YEAR} - YEAR environment variable not set
  ${E_NO_INTERNET} - No internet connection
  ${E_MISSING_VIDEOS_FILE} - Videos file not found
  ${E_INVALID_AI_HANDLING} - Invalid AI handling mode
  ${E_MISSING_FILE} - Markdown file not found

Examples:
  ${SCRIPT_NAME} 1 10                     # Process days 1 through 10
  ${SCRIPT_NAME} --ai-handling=skip 5 5   # Skip days with existing AI summaries
  ${SCRIPT_NAME} --ai-handling=overwrite 1 10 # Overwrite existing AI summaries

Version: ${VERSION}
EOF
}

function version() {
  printf "%s\n" "${VERSION}"
}

function main() {
  local ai_handling="prompt"

  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --ai-handling=*)
        ai_handling="${1#*=}"
        case "${ai_handling}" in
          overwrite | skip | prompt) ;;
          *)
            err "Invalid --ai-handling value: ${ai_handling}"
            usage >&2
            exit ${E_INVALID_AI_HANDLING}
            ;;
        esac
        shift
        ;;
      --debug | -d)
        set -x
        shift
        ;;
      --help | -h)
        usage
        exit 0
        ;;
      --version)
        version
        exit 0
        ;;
      --)
        shift
        break
        ;;
      -*)
        err "Unknown option: $1"
        usage >&2
        exit ${E_INVALID_ARGS}
        ;;
      *)
        break
        ;;
    esac
  done

  # Check arguments
  if [[ "$#" -ne 2 ]]; then
    usage >&2
    exit ${E_INVALID_ARGS}
  fi

  local startday="$1"
  local endday="$2"

  # Validate numeric input
  if ! [[ "${startday}" =~ ^[0-9]+$ && "${endday}" =~ ^[0-9]+$ ]]; then
    err "Both startday and endday must be numeric."
    usage >&2
    exit ${E_INVALID_ARGS}
  fi

  if [[ "${endday}" -lt "${startday}" ]]; then
    err "endday must be greater than or equal to startday."
    usage >&2
    exit ${E_INVALID_DAY_RANGE}
  fi

  # Check if YEAR is set
  if [[ -z "${YEAR}" ]]; then
    err "Error: YEAR environment variable is not set."
    exit ${E_MISSING_YEAR}
  fi

  internet::checkinternet || exit ${E_NO_INTERNET}

  # Check if videos file exists
  if [[ ! -f "${VIDEOS_FILE}" ]]; then
    err "Error: ${VIDEOS_FILE} not found."
    exit ${E_MISSING_VIDEOS_FILE}
  fi

  # Get number of lines in the file
  local total_lines
  total_lines=$(wc -l < "${VIDEOS_FILE}")

  # Adjust endday if it exceeds total lines
  if [[ "${endday}" -gt "${total_lines}" ]]; then
    err "Warning: endday (${endday}) exceeds total lines (${total_lines}). Adjusting to ${total_lines}."
    endday="${total_lines}"
  fi

  process_days "${startday}" "${endday}" "${ai_handling}"
}

function process_days() {
  local startday="$1"
  local endday="$2"
  local ai_handling="$3"
  local lineno="${startday}"

  mapfile -t videos < <(sed -n "${startday},${endday}p" "${VIDEOS_FILE}")
  for videoid in "${videos[@]}"; do
    if [[ -n "${videoid}" ]]; then
      local ret=0
      process_single_day "${lineno}" "${videoid}" "${ai_handling}" || ret=$?
      lineno=$((lineno + 1))

      if [[ "${lineno}" -le "${endday}" ]] && [[ "$ret" == 0 ]]; then
        log "Waiting for 10 seconds before processing next day's video..."
        sleep 10
      fi
    fi
  done
}

function process_single_day() {
  local lineno="$1"
  local videoid="$2"
  local ai_handling="$3"
  local filename="Day$(printf "%03d" "${lineno}").md"
  local month
  month=$(date -d "${YEAR}-01-01 +$((lineno - 1)) days" +%B)
  local filepath="${month}/${filename}"

  if [[ ! -f "${filepath}" ]]; then
    err "Warning: ${filepath} not found. Skipping videoid ${videoid} (line ${lineno})."
    return ${E_MISSING_FILE}
  fi

  if grep "AI-Generated Summary:" "${filepath}" &> /dev/null; then
    case "${ai_handling}" in
      overwrite)
        backup_and_clean_file "${filepath}"
        append_summary "${filepath}" "${videoid}"
        ;;
      skip)
        log "Skipping ${filepath} (already contains AI summary)"
        ;;
      prompt)
        local resp
        # Interactive prompt if neither option was specified
        if [ -t 0 ]; then
          read -r -p "${filepath} already contains AI-Generated Summary. Generate new one (Yy/Nn)? " resp
        else
          read -r resp
        fi
        if [[ "${resp}" == Y* || "${resp}" == y* ]]; then
          backup_and_clean_file "${filepath}"
          append_summary "${filepath}" "${videoid}"
        else
          return 1
        fi
        ;;
    esac
  else
    append_summary "${filepath}" "${videoid}"
  fi
}

function backup_and_clean_file() {
  local filepath="$1"
  log "Backing up file to ${filepath}.bak ..."
  cp "${filepath}" "${filepath}.bak"

  local tempfile
  tempfile="$(mktemp)"

  awk '
    /^### AI-Generated Summary:/ { in_block = 1; next }
    /^### / && in_block { in_block = 0 }
    !in_block
  ' "${filepath}" > "${tempfile}" && mv "${tempfile}" "${filepath}"
}

function append_summary() {
  local filepath="$1"
  local videoid="$2"

  log "Appending to ${filepath} (Day ${lineno}, ${videoid})"
  {
    printf "\n"
    summaryfname="${filepath%%.*}Summary.txt"
    "${SCRIPT_DIR}/summarizevideo" -- "${videoid}" >| "$summaryfname"
    "${SCRIPT_DIR}/generateimageprompt" "$summaryfname" &> /dev/null
    cat "$summaryfname"
  } >> "${filepath}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # Resolve script directory
  if command -v realpath > /dev/null 2>&1; then
    readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
  else
    readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" && pwd -P)"
  fi

  source "${SCRIPT_DIR}/lib/internet.sh"
  source "${SCRIPT_DIR}/lib/util.sh"
  source "${SCRIPT_DIR}/lib/require.sh"
  source "${SCRIPT_DIR}/lib/lockconfig.sh"
  lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

  require_commands date tee sed mv awk grep cp cat mktemp wc
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
