#!/usr/bin/env bash
######################################################################
# Adds snippet images to markdown files and generates compact versions
# with table of contents for each month.
######################################################################
# shellcheck disable=SC2155,SC1090,SC1091
set -euo pipefail
shopt -s inherit_errexit

readonly SUCCESS=0
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
# Source required libraries
source "${SCRIPT_DIR}/date.sh"
source "${SCRIPT_DIR}/require.sh"
source "${SCRIPT_DIR}/vidmd.sh"
source "${SCRIPT_DIR}/lockconfig.sh"
lock_config_vars "${SCRIPT_DIR}/config.env"
# Check requirements
require_commands date tee
require_vars GITHUB_USERNAME
######################################################################
# Display usage information
# Globals: FNAME
# Arguments: None
# Returns: None (exits script)
######################################################################
usage() {
  cat << EOF
Usage: ${0##*/} [-d|--debug] [doy ... doy]
  doy - day of year (must be integer)
Options:
  -d, --debug      Enable debug output
Processes snippet images for specified days of year
EOF
  exit "${SUCCESS}"
}

######################################################################
# Main function
# Globals: FNAME, SCRIPT_DIR
# Arguments: list of day-of-year values
# Returns: None
######################################################################
main() {
  # Validate arguments
  if [[ $# -eq 0 ]]; then
    usage
  fi

  # Check requirements
  require_commands date markdown-toc-gen
  require_vars GITHUB_USERNAME

  # Validate numeric inputs
  for doy in "$@"; do
    if ! date::isnumeric "${doy}"; then
      usage
    fi
  done

  local oldmonth="$(date::mfromdoy "${1#0}")"
  local month=""
  local root="$(git::getroot)"

  # Process each day of year
  for doy in "$@"; do
    month="$(date::mfromdoy "${doy#0}")"
    local mdfile="${month}/Day$(printf "%03d" "${doy#0}").md"
    local fname="${month}/jpgs/Day$(printf "%d" "${doy}")Snippet*.jpg"
    local regexjpg='^\./[A-Za-z]+/jpgs/Day[0-9]+Snippet([0-9]?)\.jpg$'

    shopt -s nullglob
    for file in ./${fname}; do
      if [[ "${file}" =~ ${regexjpg} ]]; then
        local snippet="${BASH_REMATCH[1]}"
        local url="https://raw.githubusercontent.com/${GITHUB_USERNAME}/${root}/refs/heads/main/${month}/jpgs/Day$(printf "%d" "${doy#0}")Snippet${snippet}.jpg"
        local caption
        if [[ -n "$snippet" ]]; then
          caption="Day $(printf "%d" "${doy#0}") Snippet ${snippet}"
        else
          caption="Day $(printf "%d" "${doy#0}") Snippet"
        fi
        local header="### ${caption}"
        local md="![${caption}](${url})"
        {
          echo ""
          echo "${header}"
          echo ""
          echo "${md}"
        } >> "${mdfile}"
      fi
    done
    shopt -u nullglob

    # Generate compact version when month changes
    if [[ "${oldmonth}" != "${month}" ]]; then
      "${SCRIPT_DIR}/genmonth" "$(date::monthnumberfrommonth "${oldmonth}" "${YEAR}")"
      oldmonth="${month}"
    fi
  done

  # Generate final compact version
  "${SCRIPT_DIR}/genmonth" "$(date::monthnumberfrommonth "${oldmonth}" "${YEAR}")"
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --debug)
      set -x
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
