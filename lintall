#!/usr/bin/env bash
######################################################################
# lintall - Lint and format all markdown files in the project
#
# This script runs markdownlint and mdformat on all markdown files
# in the project directory tree.
######################################################################

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SUCCESS=0
readonly SCRIPT_NAME="$(basename "$0")"

# Resolve script directory
if command -v realpath > /dev/null 2>&1; then
  readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
else
  readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" && pwd -P)"
fi
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

function version() {
  printf "%s\n" "$VERSION"
}

######################################################################
# Display usage information
######################################################################
usage() {
  cat << EOF
Usage: ${0##*/} [options]

Options:
  -h, --help    Show this help message and exit
  -v, --verbose Enable verbose output
  -d, --debug   Enable debug output (set -x)
EOF
  exit "${SUCCESS}"
}

######################################################################
# Main function
######################################################################
main() {
  local verbose=0
  local debug_mode=0

  # Parse command line options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help) usage ;;
      -v | --verbose) verbose=1 ;;
      -d | --debug) debug_mode=1 ;;
      --version)
        version
        exit 0
        ;;
      *) die "Invalid option: $1" ;;
    esac
    shift
  done

  # Enable debug if requested
  if ((debug_mode)); then
    set -x
  fi

  require_commands markdownlint mdformat

  # Enable recursive globbing
  shopt -s globstar

  if ((verbose)); then
    echo "Running markdown formatter..."
  fi

  if ! mdformat -- **/*.md; then
    die "mdformat failed"
  fi

  if ((verbose)); then
    echo "Running markdown linter..."
  fi
  if ! markdownlint --fix -- **/*.md; then
    die "markdownlint failed"
  fi

  if ((verbose)); then
    echo "All markdown files linted successfully"
  fi

  exit "${SUCCESS}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
