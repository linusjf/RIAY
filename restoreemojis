#!/usr/bin/env bash

set -o nounset
set -o errexit
set -o pipefail

#######################################
# @file restoreemojis
# @brief Replace certain emojis in markdown files with alternatives
# @description Replaces specific emoji characters in all markdown files:
# - "Crying Face" (üò¢) with "Face Holding Back Tears" (ü•π)
# - "Heart Eyes" (üòç) with "Smiling Face with Hearts" (ü•∞)
#######################################

readonly VERSION="1.0.0"
declare verbose=false
declare debug=false

#######################################
# Print script version
# Globals:
#   VERSION
# Arguments:
#   None
# Outputs:
#   Version number to STDOUT
# Returns:
#   None
#######################################
function version() {
  printf "%s\n" "$VERSION"
}

#######################################
# Print usage information
# Globals:
#   None
# Arguments:
#   exit_code - Exit code to return (default: 0)
# Outputs:
#   Usage information to STDOUT or STDERR
# Returns:
#   None
#######################################
function usage() {
  local exit_code="${1:-0}"
  local output_stream=1

  if ((exit_code != 0)); then
    output_stream=2
  fi

  >&"$output_stream" printf "%b\n" \
    "Usage: ${0##*/} [OPTIONS]" \
    "Replace emoji characters in markdown files" \
    "" \
    "Options:" \
    "  -v, --verbose    Show detailed processing information" \
    "  -d, --debug      Enable debug output" \
    "  -h, --help       Show this help message" \
    "  --version        Show version information" \
    "" \
    "Examples:" \
    "  ${0##*/} --verbose    # Run with verbose output" \
    "  ${0##*/} --debug      # Run in debug mode"
}

#######################################
# Main function
# Globals:
#   verbose
#   debug
# Arguments:
#   None
# Outputs:
#   Progress messages if verbose=true
# Returns:
#   0 on success, non-zero on error
#######################################
function main() {
  local -r files=(./**/*.md ./*.md)
  local file

  if [[ "$debug" = true ]]; then
    set -x
  fi

  for file in "${files[@]}"; do
    [[ -f "$file" ]] || continue

    if [[ "$verbose" = true ]]; then
      printf "Processing file: %s\n" "$file"
    fi

    sed -i 's/üò¢/ü•π/g' "$file"
    sed -i 's/üòç/ü•∞/g' "$file"
  done
}

#######################################
# Cleanup function
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   None
#######################################
function cleanup() {
  if [[ "$verbose" = true ]]; then
    printf "Cleanup complete\n"
  fi
}

# --- Main Execution ---
trap cleanup EXIT

while [[ $# -gt 0 ]]; do
  case "$1" in
    -v | --verbose) verbose=true ;;
    -d | --debug) debug=true ;;
    -h | --help)
      usage
      exit 0
      ;;
    --version)
      version
      exit 0
      ;;
    *)
      usage 1
      exit 1
      ;;
  esac
  shift
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
