#!/usr/bin/env bash

# Transcribe YouTube videos using OpenAI Whisper API
# Downloads audio from YouTube and sends to Whisper for transcription

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/curl.sh"
source "${SCRIPT_DIR}/lib/files.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

# Initialize variables
verbose=false
debug=false
dry_run=false
video_id=""
output_file=""
custom_output=false
tmp_dir=""

function cleanup() {
  files::safe_remove_dir "${tmp_dir}"
}

function version() {
  printf "%s\n" "${VERSION}"
}

function usage() {
  local exit_code=${1:-0}
  local output_stream=1
  ((exit_code != 0)) && output_stream=2

  cat >&"${output_stream}" << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <youtube_video_id>

Options:
  -h, --help      Show this help message and exit
  -v, --verbose   Enable verbose output
  -d, --debug     Enable debug mode (sets -x)
  -n, --dry-run   Run without making any changes
  -o, --output    Specify custom output file path
  --version       Show version information and exit

Examples:
  ${SCRIPT_NAME} dQw4w9WgXcQ
  ${SCRIPT_NAME} -v dQw4w9WgXcQ -o custom_output.txt
EOF

  exit "${exit_code}"
}

function dryrun() {
  log "DRY RUN: Would process video ID: ${video_id}"
  if ${custom_output}; then
    log "DRY RUN: Would create output file: ${output_file}"
  else
    log "DRY RUN: Would create output file: ${CAPTIONS_OUTPUT_DIR}/${video_id}.en.txt"
  fi
  log "DRY RUN: Would download audio using downloadaudio script"
  log "DRY RUN: Would transcribe and/or translate audio using Whisper API"
  log "DRY RUN: Would clean up temporary files"
}

function parse_args() {
  while (($# > 0)); do
    case "$1" in
      -h | --help) usage 0 ;;
      -v | --verbose) verbose=true ;;
      -d | --debug) debug=true ;;
      -n | --dry-run) dry_run=true ;;
      -o | --output)
        shift
        output_file="$1"
        custom_output=true
        ;;
      --version)
        version
        exit 0
        ;;
      -*)
        err "Unknown option: $1"
        usage 1
        ;;
      *)
        if [[ -z "${video_id}" ]]; then
          video_id="$1"
        else
          err "Too many arguments"
          usage 1
        fi
        ;;
    esac
    shift
  done

  if [[ -z "${video_id}" ]]; then
    err "YouTube video ID is required"
    usage 1
  fi

  if ! ${custom_output}; then
    output_file="${CAPTIONS_OUTPUT_DIR}/${video_id}.en.txt"
  fi
}

function transcribe_audio() {
  local audio_file="$1"
  ${verbose} && log "Transcribing and/or translating with Whisper..."
  # use translations end-point so that if in different language it is translated to English

  curl --request POST \
    --url https://api.openai.com/v1/audio/translations \
    --header "Authorization: Bearer $OPENAI_API_KEY" \
    --header 'Content-Type: multipart/form-data' \
    --form file=@"${audio_file}" \
    --form model=whisper-1 \
    --form response_format=text
}

function main() {
  parse_args "$@"

  if ${dry_run}; then
    dryrun
    exit 0
  fi

  trap cleanup EXIT
  tmp_dir="$(files::create_temp_dir "${SCRIPT_NAME}")"

  ${debug} && set -x

  ${verbose} && log "Downloading audio for video ID: ${video_id}"
  local audio_file="$("${SCRIPT_DIR}/downloadaudio" "${video_id}")" \
    && transcribe_audio "${audio_file}" > "${output_file}"
  if ${verbose}; then
    log "Transcription saved to: ${output_file}"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands date tee cat curl
  require_vars OPENAI_API_KEY CAPTIONS_OUTPUT_DIR
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
