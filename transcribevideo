#!/usr/bin/env bash

# Transcribe YouTube videos using OpenAI Whisper API
# Downloads audio from YouTube and sends to Whisper for transcription

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/curl.sh"
source "${SCRIPT_DIR}/lib/files.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

# Initialize variables
VERBOSE=false
DEBUG=false
DRY_RUN=false
VIDEO_ID=""
OUTPUT_FILE=""
CUSTOM_OUTPUT=false

function version() {
  printf "%s\n" "${VERSION}"
}

function usage() {
  local exit_code=${1:-0}
  local output_stream=1
  ((exit_code != 0)) && output_stream=2

  cat >&"${output_stream}" << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <youtube_video_id>

Options:
  -h, --help      Show this help message and exit
  -v, --verbose   Enable verbose output
  -d, --debug     Enable debug mode (sets -x)
  -n, --dry-run   Run without making any changes
  -o, --output    Specify custom output file path
  --version       Show version information and exit

Examples:
  ${SCRIPT_NAME} dQw4w9WgXcQ
  ${SCRIPT_NAME} -v dQw4w9WgXcQ -o custom_output.txt
EOF

  exit "${exit_code}"
}

function dryrun() {
  log "DRY RUN: Would process video ID: ${VIDEO_ID}"
  if ${CUSTOM_OUTPUT}; then
    log "DRY RUN: Would create output file: ${OUTPUT_FILE}"
  else
    log "DRY RUN: Would create output file: ${CAPTIONS_OUTPUT_DIR}/${VIDEO_ID}.en.txt"
  fi
  log "DRY RUN: Would download audio using downloadaudio script"
  log "DRY RUN: Would transcribe and/or translate audio using Whisper API"
  log "DRY RUN: Would clean up temporary files"
}

function parse_args() {
  while (($# > 0)); do
    case "$1" in
      -h | --help) usage 0 ;;
      -v | --verbose) VERBOSE=true ;;
      -d | --debug) DEBUG=true ;;
      -n | --dry-run) DRY_RUN=true ;;
      -o | --output)
        shift
        OUTPUT_FILE="$1"
        CUSTOM_OUTPUT=true
        ;;
      --version)
        version
        exit 0
        ;;
      -*)
        err "Unknown option: $1"
        usage 1
        ;;
      *)
        if [[ -z "${VIDEO_ID}" ]]; then
          VIDEO_ID="$1"
        else
          err "Too many arguments"
          usage 1
        fi
        ;;
    esac
    shift
  done

  if [[ -z "${VIDEO_ID}" ]]; then
    err "YouTube video ID is required"
    usage 1
  fi

  if ! ${CUSTOM_OUTPUT}; then
    OUTPUT_FILE="${CAPTIONS_OUTPUT_DIR}/${VIDEO_ID}.en.txt"
  fi
}

function check_local_prerequisites() {
  is_command_available ffmpeg && is_command_available whisper
}

function transcribe_via_webservice() {
  local audio_file="$1"
  local url="${ASR_LLM_BASE_URL}${ASR_LLM_ENDPOINT}"
  ${VERBOSE} && log "Transcribing with Whisper ${url}"
  curl::request "$url" \
    "POST" \
    --header "Authorization: Bearer ${ASR_LLM_API_KEY}" \
    --header 'Content-Type: multipart/form-data' \
    --form file=@"${audio_file}" \
    --form model="${ASR_LLM_MODEL}" \
    --form response_format=text \
    --form prompt="${ASR_INITIAL_PROMPT:-}" || return 1
}

function transcribe_locally() {
  local audio_file="$1"
  if "${USE_FASTER_WHISPER:-false}"; then
    ./fasterwhisperer.py "$audio_file"
  else
    whisper --task transcribe --model "${ASR_LOCAL_MODEL:-base}" --output_format txt --language en \
      --initial-prompt "${ASR_INITIAL_PROMPT:-}" --beam-size "${ASR_BEAM_SIZE:-5}" "$audio_file" &> /dev/null || return 1
    # since transcript is saved in current directory
    local file_name="$(basename "$audio_file")"
    cat "${file_name%.*}.txt"
  fi
}

function transcribe_audio() {
  local audio_file="$1"
  ${VERBOSE} && log "Transcribing with Whisper..."
  if ${TRANSCRIBE_LOCALLY:-false}; then
    if check_local_prerequisites; then
      >&2 echo "Transcribing locally... This may take longer than usual..."
      transcribe_locally "$audio_file"
    else
      if "${ENABLE_FAILOVER_MODE:-true}"; then
        >&2 echo "ffmpeg and/or whisper not available. Trying webservice instead..."
        transcribe_via_webservice "$audio_file"
      else
        >&2 echo "ffmpeg and/or whisper not available. Exiting..."
        return
      fi
    fi
  else
    transcribe_via_webservice "$audio_file"
  fi
}

function main() {
  parse_args "$@"

  if ${DRY_RUN}; then
    dryrun
    exit 0
  fi

  ${DEBUG} && set -x

  ${VERBOSE} && log "Downloading audio for video ID: ${VIDEO_ID}"
  local audio_file="$("${SCRIPT_DIR}/downloadaudio" "${VIDEO_ID}")" \
    && transcribe_audio "${audio_file}" > "${OUTPUT_FILE}" || return 1
  if ${VERBOSE}; then
    log "Transcription saved to: ${OUTPUT_FILE}"
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands date tee cat
  require_vars OPENAI_API_KEY CAPTIONS_OUTPUT_DIR ASR_LLM_API_KEY ASR_LLM_BASE_URL ASR_LLM_ENDPOINT ASR_LLM_MODEL ASR_LOCAL_MODEL \
    TRANSCRIBE_LOCALLY ENABLE_FAILOVER_MODE ASR_INITIAL_PROMPT ASR_BEAM_SIZE
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
