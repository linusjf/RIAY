#!/usr/bin/env bash

# Transcribe YouTube videos using OpenAI Whisper API
# Downloads audio from YouTube and sends to Whisper for transcription

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/curl.sh"
source "${SCRIPT_DIR}/lib/files.sh"

# Initialize variables
verbose=false
debug=false
dry_run=false
video_id=""
output_file=""
tmp_dir=""

function cleanup() {
  files::safe_remove_dir "${tmp_dir}"
}

function version() {
  printf "%s\n" "${VERSION}"
}

function usage() {
  local exit_code=${1:-0}
  local output_stream=1
  (( exit_code != 0 )) && output_stream=2

  cat >&"${output_stream}" <<EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <youtube_video_id>

Options:
  -h, --help      Show this help message and exit
  -v, --verbose   Enable verbose output
  -d, --debug     Enable debug mode (sets -x)
  -n, --dry-run   Run without making any changes
  --version       Show version information and exit

Examples:
  ${SCRIPT_NAME} dQw4w9WgXcQ
  ${SCRIPT_NAME} -v dQw4w9WgXcQ
EOF

  exit "${exit_code}"
}

function parse_args() {
  while (( $# > 0 )); do
    case "$1" in
      -h|--help)    usage 0 ;;
      -v|--verbose) verbose=true ;;
      -d|--debug)   debug=true ;;
      -n|--dry-run) dry_run=true ;;
      --version)    version; exit 0 ;;
      -*)
        err "Unknown option: $1"
        usage 1
        ;;
      *)
        if [[ -z "${video_id}" ]]; then
          video_id="$1"
        else
          err "Too many arguments"
          usage 1
        fi
        ;;
    esac
    shift
  done

  if [[ -z "${video_id}" ]]; then
    err "YouTube video ID is required"
    usage 1
  fi
}

function check_dependencies() {
  require_commands yt-dlp curl
  require_vars OPENAI_API_KEY
}

function download_audio() {
  local youtube_url="https://www.youtube.com/watch?v=${video_id}"
  local audio_file="${tmp_dir}/audio.m4a"

  ${verbose} && log "Downloading audio for video ID: ${video_id}"
  yt-dlp -f 'bestaudio[ext=m4a]' -o "${audio_file}" "${youtube_url}"
  printf "%s" "${audio_file}"
}

function transcribe_audio() {
  local audio_file="$1"
  
  ${verbose} && log "Transcribing with Whisper..."
  curl::safe_curl_request \
    "https://api.openai.com/v1/audio/transcriptions" \
    "POST" \
    "Authorization: Bearer ${OPENAI_API_KEY}" \
    "" \
    "-F file=@\"${audio_file}\" -F model=\"whisper-1\" -F response_format=\"text\""
}

function main() {
  parse_args "$@"
  check_dependencies

  trap cleanup EXIT
  tmp_dir=$(files::get_temp_dir)
  output_file="${video_id}.en.txt"

  ${debug} && set -x

  local audio_file
  audio_file=$(download_audio)

  transcribe_audio "${audio_file}" > "${output_file}"

  ${verbose} && log "Transcription saved to: ${output_file}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
