#!/usr/bin/env bash
# Generate monthly markdown file with video index and table of contents

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/date.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"
DRY_RUN=false
APPEND_YEAR=false
readonly VERSION="1.0.0"

# Exit codes
readonly EXIT_SUCCESS=0
readonly EXIT_ARG_ERROR=1
readonly EXIT_VALIDATION_ERROR=2
readonly EXIT_COMMAND_MISSING=3
readonly EXIT_FILE_GENERATION_ERROR=4
readonly EXIT_TOC_GENERATION_ERROR=5
readonly EXIT_FILE_CLEANUP_ERROR=6

usage() {
  exitcode="${1:-0}"
  cat << EOF
Usage: ${0##*/} [-n|--dry-run] [-d|--debug] [--append-year] month [year]

Generate monthly markdown file with video index and table of contents.

Options:
  -n, --dry-run        Show what would happen without making changes
  -d, --debug          Enable debug output
  --append-year        Append year to month filename
Arguments:
  month                Month number (1-12)
  year                 Optional 4-digit year
                       If not provided, takes value of environment variable YEAR

Exit Codes:
  0                    Success
  1                    Argument error
  2                    Validation error (invalid month/year)
  3                    Required command missing
  4                    File generation error
  5                    Table of contents generation error
  6                    File cleanup error
EOF
  exit "$exitcode"
}

version() {
  printf "%s\n" "$VERSION"
}

validate_inputs() {
  local month="$1"
  local year="$2"

  if ! date::isnumeric "$month"; then
    echo "Error: Month must be a number" >&2
    return $EXIT_VALIDATION_ERROR
  fi

  if ! date::isnumeric "$year"; then
    echo "Error: Year must be a number" >&2
    return $EXIT_VALIDATION_ERROR
  fi

  if ((${#year} != 4)); then
    echo "Error: Year must be 4 digits" >&2
    return $EXIT_VALIDATION_ERROR
  fi

  month=$((10#$month))
  if ((month < 1 || month > 12)); then
    echo "Error: Month must be between 1 and 12" >&2
    return $EXIT_VALIDATION_ERROR
  fi

  return $EXIT_SUCCESS
}

generate_month_file() {
  local month="$1"
  local year="$2"
  local month_name monthmd

  month_name="$(date::monthfromnumber "$month")"
  if $APPEND_YEAR; then
    monthmd="${month_name}${year}.md"
  else
    monthmd="${month_name}.md"
  fi

  if ! "${SCRIPT_DIR}/compact" "$month_name" >| "$monthmd"; then
    echo "Error: Failed to generate compact index" >&2
    return $EXIT_FILE_GENERATION_ERROR
  fi

  if ! "${SCRIPT_DIR}/gentoc" "$monthmd"; then
    echo "Error: Failed to generate table of contents" >&2
    return $EXIT_TOC_GENERATION_ERROR
  fi

  if ! sed -i '/\S/,$!d' "$monthmd"; then
    echo "Error: Failed to clean up file" >&2
    return $EXIT_FILE_CLEANUP_ERROR
  fi

  return $EXIT_SUCCESS
}

dry_run() {
  local month="$1"
  local year="$2"
  local month_name monthmd

  month_name="$(date::monthfromnumber "$month")"
  if $APPEND_YEAR; then
    monthmd="${month_name}${year}.md"
  else
    monthmd="${month_name}.md"
  fi

  cat << EOF
DRY RUN: Would process month $month_name ($(date::monthfromnumber "$month")) for year $year
Would generate these files:
  - $monthmd (monthly markdown file)
Would run these commands:
  - ${SCRIPT_DIR}/compact "$month_name" >| "$monthmd"
  - ${SCRIPT_DIR}/gentoc "$monthmd"
  - sed -i '/\\S/,\$!d' "$monthmd"
No files actually modified
EOF
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -n | --dry-run)
      DRY_RUN=true
      shift
      ;;
    -d | --debug)
      set -x
      shift
      ;;
    --append-year)
      APPEND_YEAR=true
      shift
      ;;
    -v | --version)
      version
      exit $EXIT_SUCCESS
      ;;
    -h | --help)
      usage
      ;;
    *)
      break
      ;;
  esac
done

main() {
  local month year

  # Validate arguments
  if [[ $# -gt 2 ]] || [[ $# -eq 0 ]]; then
    usage $EXIT_ARG_ERROR
  fi

  month="$1"
  year="${2:-${YEAR}}"

  if ! validate_inputs "$month" "$year"; then
    exit $?
  fi

  if ! require_commands date markdown-toc; then
    exit $EXIT_COMMAND_MISSING
  fi

  if $DRY_RUN; then
    dry_run "$month" "$year"
    exit $EXIT_SUCCESS
  fi

  if ! generate_month_file "$month" "$year"; then
    exit $?
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
