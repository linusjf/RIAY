#!/usr/bin/env bash

# Generates and updates table of contents for Markdown files
# Verifies TOC is present and up-to-date, updates if needed

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME="${0##*/}"

usage() {
  cat << EOF
Usage: ${SCRIPT_NAME} [-d|--debug] markdown_file

Generates or updates table of contents in specified Markdown file.

Options:
  -d, --debug      Enable debug output
Arguments:
  markdown_file  Path to Markdown file to process

Globals:
  None

Outputs:
  Error messages to STDERR on failure

Returns:
  0 on success
  1 on invalid arguments or file issues
  2 on dependency errors
EOF
  exit 1
}

require() {
  hash "$1" 2> /dev/null || {
    echo "Error: Required command '$1' not found" >&2
    exit 2
  }
}

validate_input() {
  local file="$1"

  if [[ $# -ne 1 ]]; then
    echo "Error: Exactly one argument required" >&2
    usage
  fi

  if [[ ! -f "${file}" ]]; then
    echo "Error: '${file}' is not a valid file" >&2
    exit 1
  fi

  if [[ ! -r "${file}" ]]; then
    echo "Error: Cannot read '${file}'" >&2
    exit 1
  fi
}

generate_toc() {
  local file="$1"

  if ! markdown-toc-gen check "${file}" &> /dev/null; then
    if ! markdown-toc-gen update "${file}" > /dev/null; then
      echo "Error: Failed to generate TOC for '${file}'" >&2
      return 1
    fi
  fi
  return 0
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --debug)
      set -x
      shift
      ;;
    *)
      break
      ;;
  esac
done

main() {
  require markdown-toc-gen
  validate_input "$@"
  generate_toc "$@"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
