#!/usr/bin/env bash

# Generates and updates table of contents for Markdown files
# Verifies TOC is present and up-to-date, updates if needed

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_NAME="${0##*/}"
readonly VERSION="1.0.0"

# Exit code constants
readonly EXIT_SUCCESS=0
readonly EXIT_INVALID_ARGUMENTS=1
readonly EXIT_FILE_ERROR=2
readonly EXIT_DEPENDENCY_ERROR=3
readonly EXIT_TOC_GENERATION_ERROR=4

# Source lib/require.sh
if command -v realpath > /dev/null 2>&1; then
  readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
else
  readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)"
fi
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

#######################################
# Validate input file exists and is readable
# Globals: none
# Arguments:
#   file - path to markdown file
# Outputs: error message to STDERR on failure
# Returns: exits with status EXIT_FILE_ERROR on invalid input
#######################################
validate_input() {
  local file="$1"

  if [[ $# -ne 1 ]]; then
    err "Error: Exactly one argument required"
    usage $EXIT_INVALID_ARGUMENTS
  fi

  if [[ ! -f "${file}" ]]; then
    err "Error: '${file}' is not a valid file"
    exit $EXIT_FILE_ERROR
  fi

  if [[ ! -r "${file}" ]]; then
    err "Error: Cannot read '${file}'"
    exit $EXIT_FILE_ERROR
  fi
}

#######################################
# Generate or update table of contents
# Globals: none
# Arguments:
#   file - path to markdown file
# Outputs: error message to STDERR on failure
# Returns: EXIT_SUCCESS on success, EXIT_TOC_GENERATION_ERROR on failure
#######################################
generate_toc() {
  local file="$1"

  if ! markdown-toc-gen check "${file}" &> /dev/null; then
    if ! markdown-toc-gen update "${file}" > /dev/null; then
      err "Error: Failed to generate TOC for '${file}'"
      return $EXIT_TOC_GENERATION_ERROR
    fi
  fi
  return $EXIT_SUCCESS
}

#######################################
# Print version information
# Globals: VERSION
# Arguments: none
# Outputs: version string to STDOUT
# Returns: none
#######################################
version() {
  printf "%s\n" "${VERSION}"
}

#######################################
# Print usage information
# Globals: SCRIPT_NAME
# Arguments: none
# Outputs: usage message to STDOUT
# Returns: none
#######################################
usage() {
  exit_code="${1:-$EXIT_SUCCESS}"
  cat << EOF
Usage: ${SCRIPT_NAME} [-d|--debug] [-v|--version] [-h|--help] markdown_file

Generates or updates table of contents in specified Markdown file.

Options:
  -d, --debug      Enable debug output
  -v, --version    Show version information
  -h, --help       Show this help message

Exit Codes:
  0 - Success
  1 - Invalid arguments (incorrect usage or missing file)
  2 - File access error (file not found or unreadable)
  3 - Dependency error (markdown-toc-gen not available)
  4 - TOC generation error (failed to create/update TOC)

Examples:
  ${SCRIPT_NAME} README.md
  ${SCRIPT_NAME} --debug docs/API.md
EOF
  exit "$exit_code"
}

main() {
  local file

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --debug)
        set -x
        shift
        ;;
      -v | --version)
        version
        exit $EXIT_SUCCESS
        ;;
      -h | --help)
        usage
        ;;
      *)
        file="$1"
        break
        ;;
    esac
  done

  if [[ $# -ne 1 ]]; then
    usage $EXIT_INVALID_ARGUMENTS
  fi
  require_commands markdown-toc-gen || exit $EXIT_DEPENDENCY_ERROR
  validate_input "${file}"
  generate_toc "${file}" || exit $EXIT_TOC_GENERATION_ERROR
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    require_commands date tee
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
