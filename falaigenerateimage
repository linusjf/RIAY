#!/usr/bin/env bash
#
# Generate images using FAL AI's Janus API
#
# Usage: falaigenerateimage [OPTIONS] "prompt text"
# Options:
#   -h, --help      Show this help message and exit
#   -v, --version   Show version information and exit
#   --verbose       Enable verbose output
#
# Exit codes:
#   0 - Success
#   1 - General error
#   2 - Missing required environment variable (FALAI_KEY)
#   3 - Missing or empty prompt
#   4 - API request failed
#   5 - Status polling timeout
#   6 - Image processing error
#
# Output: Path to generated JPG image
#
# Dependencies: jq, curl, gm (GraphicsMagick)
# Requires FALAI_KEY environment variable set

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"
readonly POLL_INTERVAL=5
readonly MAX_RETRIES=60
temp_file=""

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] "prompt text"

Options:
  -h, --help      Show this help message and exit
  -v, --version   Show version information and exit
  --verbose       Enable verbose output

Exit codes:
  0 - Success
  1 - General error
  2 - Missing required environment variable (FALAI_KEY)
  3 - Missing or empty prompt
  4 - API request failed
  5 - Status polling timeout
  6 - Image processing error

Examples:
  $SCRIPT_NAME "a beautiful sunset over mountains"
  echo "a cute puppy" | $SCRIPT_NAME
EOF
}

function generate_image() {
  local prompt="$1"
  local escaped_prompt payload response request_id

  escaped_prompt="$(jq -Rs <<< "$prompt")" || die "Failed to escape prompt" 4

  payload="$(jq -n --arg prompt "$escaped_prompt" '{
    "prompt": $prompt
  }')" || die "Failed to create payload" 4

  response="$(
    curl::safe_curl_request \
      "https://queue.fal.run/fal-ai/${FALAI_IMAGE_GENERATION_MODEL}" \
      "POST" \
      "'Authorization: Key $FALAI_KEY' 'Content-Type: application/json'" \
      "$payload"
  )" || die "Failed to submit request" 4

  request_id="$(echo "$response" | jq -r '.request_id')" \
    || die "Failed to parse request ID" 4

  printf "%s\n" "$request_id"
}

function poll_status() {
  local request_id="$1"
  local attempt=1
  local status response

  while ((attempt <= MAX_RETRIES)); do
    response="$(
      curl::safe_curl_request \
        "https://queue.fal.run/fal-ai/${FALAI_IMAGE_GENERATION_MODEL}/requests/${request_id}/status" \
        "GET" \
        "'Authorization: Key $FALAI_KEY'"
    )" \
      || die "Failed to check status" 4

    status="$(echo "$response" | jq -r '.status')" \
      || die "Failed to parse status" 4

    case "$status" in
      "COMPLETED")
        printf "\n"
        return 0
        ;;
      "IN_PROGRESS" | "IN_QUEUE")
        if [[ "${VERBOSE:-false}" == "true" ]]; then
          printf "\r⏳ Polling status for request_id %s: (attempt %d/%d)" "$request_id" "$attempt" "$MAX_RETRIES"
        fi
        sleep "$POLL_INTERVAL"
        ((attempt++))
        ;;
      *)
        die "Unexpected status: $status" 4
        ;;
    esac
  done

  return 1
}

function download_image() {
  local request_id="$1"
  local response response_url

  response="$(
    curl::safe_curl_request \
      "https://queue.fal.run/fal-ai/${FALAI_IMAGE_GENERATION_MODEL}/requests/${request_id}" \
      "GET" \
      "'Authorization: Key $FALAI_KEY'"
  )" || die "Failed to get final response" 4

  response_url="$(echo "$response" | jq -r '.images[0].url')" \
    || die "Failed to parse response URL" 6

  temp_file="$(mktemp --quiet -t tempXXX.png)" \
    || die "Failed to create temp file" 6
  curl::safe_curl_download "$response_url" "$temp_file" \
    || die "Failed to download image" 6

  jpg_file="${temp_file%.*}.jpg"
  gm convert "$temp_file" "$jpg_file" \
    || die "Failed to convert image to JPG" 6

  rm -f "$temp_file"
  printf "%s\n" "$jpg_file"
}

function read_input() {
  local input="$1"
  if [[ -n "$input" ]]; then
    echo "$input"
  elif [[ ! -t 0 ]]; then
    # Not interactive; input is piped
    cat
  else
    # Interactive shell; prompt user for input
    read -rp "Enter prompt: " prompt
    echo "$prompt"
  fi
}

function main() {
  local input="${1:-}"
  prompt="$(read_input "$input")"
  local request_id output_file

  [[ -z "$FALAI_KEY" ]] && die "FALAI_KEY environment variable not set" 2
  [[ -z "$prompt" ]] && die "Please provide a prompt" 3

  if [[ "${VERBOSE:-false}" == "true" ]]; then
    printf "\nGenerating image for prompt: %s\n" "$prompt"
  fi

  request_id="$(generate_image "$prompt")"
  poll_status "$request_id" || die "Timed out after $MAX_RETRIES attempts" 5
  output_file="$(download_image "$request_id")"

  printf "\n✅ Image generated successfully: %s\n" "$output_file"
}

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/internet.sh"
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/curl.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"
require_commands jq tee cat sed mktemp cp gm dirname basename

while [[ $# -gt 0 ]]; do
  case "$1" in
    -v | --version)
      version
      exit 0
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    *) break ;;
  esac
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
