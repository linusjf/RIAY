#!/usr/bin/env bash
set -euo pipefail

# Check if month number was provided
if [ $# -eq 0 ]; then
  echo "Error: Month number (1-12) must be provided as first argument"
  exit 1
fi

month_num=$1
if [ "$month_num" -lt 1 ] || [ "$month_num" -gt 12 ]; then
  echo "Error: Month number must be between 1 and 12"
  exit 1
fi

# Convert month number to name
month_names=("January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December")
month=${month_names[$((month_num - 1))]}

snippetfiles="$(./findsnippetfiles | grep "${month}" || true)"

if [[ -z "$snippetfiles" ]]; then
  printf "%s\n" "No snippet files found for ${month}"
  exit 0
fi

# Attempt to get the remote URL for origin using SSH format
remote_url=$(git remote get-url origin | grep '^git@')

if [ -z "$remote_url" ]; then
  echo "Error: Not a Git repository cloned via SSH, or 'origin' remote not found with SSH URL."
  exit 1
fi

# Extract just the repository name from the SSH URL (without username)
GITHUB_REPO_NAME=$(echo "$remote_url" | sed -E 's/.*\/([^.]+)\.git$/\1/')

# Define the base snippet with placeholders for month, day, username (will be extracted), repo name, and suffix
base_snippet_no_suffix="^!\[Day PLACEHOLDER_DAY Snippet \]\(https://raw\.githubusercontent\.com/PLACEHOLDER_USERNAME/$GITHUB_REPO_NAME/main/PLACEHOLDER_MONTH/jpgs/DayPLACEHOLDER_DAYSnippet\.jpg\)$"
base_snippet_with_suffix="^!\[Day PLACEHOLDER_DAY Snippet PLACEHOLDER_SUFFIX\]\(https://raw\.githubusercontent\.com/PLACEHOLDER_USERNAME/$GITHUB_REPO_NAME/main/PLACEHOLDER_MONTH/jpgs/DayPLACEHOLDER_DAYSnippetPLACEHOLDER_SUFFIX\.jpg\)$"

# Require GitHub username from environment variable
if [ -z "$GITHUB_USERNAME" ]; then
  echo "Error: GITHUB_USERNAME environment variable not set"
  exit 1
fi

# Define possible suffixes (empty string for no suffix)
suffixes=("" "1" "2" "3" "4" "5" "6" "7" "8" "9")

# Search only in the specified month directory
if [ -d "$month" ]; then
  # Find files with the format DayXXX.md in the month directory
  find "$month" -maxdepth 1 -type f -name "Day???.md" -print0 | while IFS= read -r -d $'\0' file; do
    # Extract the day number from the filename
    filename=$(basename "$file")
    day_number=$(echo "$filename" | grep -oE '[0-9]{1,3}')
    day_number=$((10#$day_number))

    if [[ -n "$day_number" ]]; then
      found_and_deleted=false

      # First, check for the snippet without any suffix
      snippet_no_suffix=$(echo "$base_snippet_no_suffix" |
        sed "s/PLACEHOLDER_MONTH/$month/g" |
        sed "s/PLACEHOLDER_DAY/$day_number/g" |
        sed "s/PLACEHOLDER_USERNAME/$GITHUB_USERNAME/g")

      if grep -E "$snippet_no_suffix" "$file" > /dev/null; then
        echo "Found snippet ${snippet_no_suffix} in: $file (Day: $day_number, Month: $month)"
        temp_file=$(mktemp)
        sed -E "s|${snippet_no_suffix}||g" "$file" > "$temp_file"
        mv "$temp_file" "$file"
        echo "Snippet ${snippet_no_suffix} removed from: $file"
        found_and_deleted=true
      fi

      # If not found without a suffix, then check with suffixes
      if ! "$found_and_deleted"; then
        # Loop through possible suffixes
        for suffix in "${suffixes[@]}"; do
          if [ -n "$suffix" ]; then # Only check suffixes if they are not empty (already checked empty case)
            # Construct the specific snippet with the current suffix
            snippet_with_suffix=$(echo "$base_snippet_with_suffix" |
              sed "s/PLACEHOLDER_MONTH/$month/g" |
              sed "s/PLACEHOLDER_DAY/$day_number/g" |
              sed "s/PLACEHOLDER_USERNAME/$GITHUB_USERNAME/g" |
              sed "s/PLACEHOLDER_SUFFIX/$suffix/g")

            # Check if the snippet exists in the file
            if grep -E "$snippet_with_suffix" "$file" > /dev/null; then
              echo "Found snippet ${snippet_with_suffix} in: $file (Day: $day_number, Month: $month)"
              # Create a temporary file to store the content without the snippet
              temp_file=$(mktemp)
              sed -E "s|${snippet_with_suffix}||g" "$file" > "$temp_file"
              # Replace the original file with the modified content
              mv "$temp_file" "$file"
              echo "Snippet ${snippet_with_suffix} removed from: $file"
              found_and_deleted=true
            fi
          fi
        done
      fi
    fi
  done
fi

echo "Scan and deletion process complete for $month."
snippetfiles="$(./findsnippetfiles | grep "${month}" || true)"
if [[ -n "$snippetfiles" ]]; then
  printf "%s\n" "Snippet files still found for ${month}:"
  printf "%s\n" "${snippetfiles}"
  exit 1
fi

exit 0
