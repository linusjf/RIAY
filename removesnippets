#!/usr/bin/env bash
set -euo pipefail

# Attempt to get the remote URL for origin using SSH format
remote_url=$(git remote get-url origin | grep '^git@')

if [ -z "$remote_url" ]; then
  echo "Error: Not a Git repository cloned via SSH, or 'origin' remote not found with SSH URL."
  exit 1
fi

# Extract just the repository name from the SSH URL (without username)
GITHUB_REPO_NAME=$(echo "$remote_url" | sed -E 's/.*\/([^.]+)\.git$/\1/')

echo "GitHub Repository Name: $GITHUB_REPO_NAME"

# Define the base snippet with placeholders for month, day, username (will be extracted), repo name, and suffix
base_snippet_no_suffix="![Day PLACEHOLDER_DAY Snippet ](https://raw.githubusercontent.com/PLACEHOLDER_USERNAME/$GITHUB_REPO_NAME/main/PLACEHOLDER_MONTH/jpgs/DayPLACEHOLDER_DAYSnippet.jpg)"
base_snippet_with_suffix="![Day PLACEHOLDER_DAY SnippetPLACEHOLDER_SUFFIX ](https://raw.githubusercontent.com/PLACEHOLDER_USERNAME/$GITHUB_REPO_NAME/main/PLACEHOLDER_MONTH/jpgs/DayPLACEHOLDER_DAYSnippetPLACEHOLDER_SUFFIX.jpg)"

# Function to get the month name from the day number and year
get_month_from_day() {
  local day_num="$1"
  local year="$2"
  local date_string="$year-01-01 + $((day_num - 1)) days"
  date -d "$date_string" "+%B"
}

# Require GitHub username from environment variable
if [ -z "$GITHUB_USERNAME" ]; then
  echo "Error: GITHUB_USERNAME environment variable not set"
  exit 1
fi

echo "GitHub Username: $GITHUB_USERNAME"

# Prompt the user for the year
read -r -p "Enter the year (YYYY): " target_year

# Define possible suffixes (empty string for no suffix)
suffixes=("" "1" "2" "3" "4" "5" "6" "7" "8" "9")

# List of month directories to search in
#month_dirs=("January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December")
month_dirs=("January")

# Search only in month directories
for month_dir in "${month_dirs[@]}"; do
  if [ -d "$month_dir" ]; then
    # Find files with the format DayXXX.md in the month directory
    find "$month_dir" -maxdepth 1 -type f -name "Day???.md" -print0 | while IFS= read -r -d $'\0' file; do
      # Extract the day number from the filename
      filename=$(basename "$file")
      day_number=$(echo "$filename" | grep -oE '[0-9]{1,3}')
      day_number=$((10#$day_number))

      if [[ -n "$day_number" ]]; then
        # Deduce the month from the day number and year
        month=$(get_month_from_day "$day_number" "$target_year")

        found_and_deleted=false

        # First, check for the snippet without any suffix
        snippet_no_suffix=$(echo "$base_snippet_no_suffix" \
          | sed "s/PLACEHOLDER_MONTH/$month/g" \
          | sed "s/PLACEHOLDER_DAY/$day_number/g" \
          | sed "s/PLACEHOLDER_USERNAME/$GITHUB_USERNAME/g")

        echo "$snippet_no_suffix"

        : << 'END_COMMENT'
        if grep -F -z "$snippet_no_suffix" "$file" > /dev/null; then
          echo "Found snippet (no suffix) in: $file (Day: $day_number, Month: $month)"
          temp_file=$(mktemp)
          sed -e "s|$snippet_no_suffix||g" "$file" > "$temp_file"
          mv "$temp_file" "$file"
          echo "Snippet (no suffix) removed from: $file"
          found_and_deleted=true
        fi
END_COMMENT

        # If not found without a suffix, then check with suffixes
        if ! "$found_and_deleted"; then
          # Loop through possible suffixes
          for suffix in "${suffixes[@]}"; do
            if [ -n "$suffix" ]; then # Only check suffixes if they are not empty (already checked empty case)
              # Construct the specific snippet with the current suffix
              snippet_with_suffix=$(echo "$base_snippet_with_suffix" \
                | sed "s/PLACEHOLDER_MONTH/$month/g" \
                | sed "s/PLACEHOLDER_DAY/$day_number/g" \
                | sed "s/PLACEHOLDER_USERNAME/$GITHUB_USERNAME/g" \
                | sed "s/PLACEHOLDER_SUFFIX/$suffix/g")

              echo "$snippet_with_suffix"

              : << 'COMMENT'
              # Check if the snippet exists in the file
              if grep -F -z "$snippet_with_suffix" "$file" > /dev/null; then
                echo "Found snippet (suffix: '$suffix') in: $file (Day: $day_number, Month: $month)"
                # Create a temporary file to store the content without the snippet
                temp_file=$(mktemp)
                sed -e "s|$snippet_with_suffix||g" "$file" > "$temp_file"
                # Replace the original file with the modified content
                mv "$temp_file" "$file"
                echo "Snippet (suffix: '$suffix') removed from: $file"
                found_and_deleted=true
                # Once found and deleted, no need to check other suffixes for this file
                break
              fi
COMMENT
            fi
          done
        fi
      fi
    done
  fi
done

echo "Scan and deletion process complete."
