#!/usr/bin/env bash
# Sanity tests for addvideo and genmonth scripts
# Tests command line options and cleans up afterwards

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
readonly ADDVIDEO_SCRIPT="${SCRIPT_DIR}/addvideo"
readonly GENMONTH_SCRIPT="${SCRIPT_DIR}/genmonth"
readonly TEST_MONTH=1
readonly TEST_YEAR=2023

usage() {
  exitcode="${1:-0}"
  cat << EOF
Usage: $0 [OPTIONS]

Run sanity tests for video processing scripts

Options:
  --from-test NUM    Start running tests from test number NUM
  --tests TESTLIST   Comma-separated list of specific tests to run
  --help             Show this help message

Available tests:
  1-5    addvideo script tests
  6-12   genmonth script tests

Examples:
  $0 --from-test 6          # Run tests starting from test 6
  $0 --tests 1,3,5         # Run only tests 1, 3 and 5
  $0                       # Run all tests
EOF
  exit "$exitcode"
}

# Parse command line arguments
START_FROM=1
TESTS_TO_RUN=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --from-test)
      START_FROM="$2"
      shift 2
      ;;
    --tests)
      IFS=',' read -ra TESTS_TO_RUN <<< "$2"
      shift 2
      ;;
    --help | -h)
      usage
      ;;
    *)
      echo "Unknown option: $1"
      usage 1
      ;;
  esac
done

# Test helper functions
print_header() {
  printf "\n\033[1m%s\033[0m\n" "$1"
}

should_run_test() {
  local test_num="$1"
  if [[ ${#TESTS_TO_RUN[@]} -gt 0 ]]; then
    for t in "${TESTS_TO_RUN[@]}"; do
      if [[ "$t" == "$test_num" ]]; then
        return 0
      fi
    done
    return 1
  fi
  [[ "$test_num" -ge "$START_FROM" ]]
}

run_test() {
  local test_num="$1"
  if ! should_run_test "$test_num"; then
    printf "  %-50s\033[33mSKIPPED\033[0m\n" "$2..."
    return 0
  fi
  printf "  %-50s" "$2..."
  shift 2
  expected_exit=${1:-0}
  shift
  if "$@" &> /dev/null; then
    actual_exit=0
  else
    actual_exit=$?
  fi
  if [[ "$actual_exit" -eq "$expected_exit" ]]; then
    printf "\033[32mPASS\033[0m\n"
  else
    printf "\033[31mFAIL (expected %d, got %d)\033[0m\n" "$expected_exit" "$actual_exit"
    return 1
  fi
}

cleanup() {
  print_header "Cleaning up..."
  rm -f January2023.md January.md
  "${SCRIPT_DIR}/cleanup"
}

trap cleanup EXIT

# Main test execution
print_header "Running addvideo sanity tests"

print_header "Test 1: Version flag"
run_test 1 "Should show version with -v" 0 "${ADDVIDEO_SCRIPT}" -v
run_test 1 "Should show version with --version" 0 "${ADDVIDEO_SCRIPT}" --version

print_header "Test 2: Help/usage"
run_test 2 "Should show usage with no args" 1 "${ADDVIDEO_SCRIPT}" || true
run_test 2 "Should show usage with -h" 0 "${ADDVIDEO_SCRIPT}" -h
run_test 2 "Should show usage with --help" 0 "${ADDVIDEO_SCRIPT}" --help

print_header "Test 3: Dry run mode"
run_test 3 "Should run dry mode with -n" 0 "${ADDVIDEO_SCRIPT}" -n "CfU7rIufywo" "Test Video"
run_test 3 "Should run dry mode with --dry-run" 0 "${ADDVIDEO_SCRIPT}" --dry-run "CfU7rIufywo" "Test Video"

print_header "Test 4: Debug mode"
run_test 4 "Should enable debug with -d" 0 "${ADDVIDEO_SCRIPT}" -d "Io1G_5I7a-0" "Test Video" || true
run_test 4 "Should enable debug with --debug" 0 "${ADDVIDEO_SCRIPT}" --debug "Io1G_5I7a-0" "Test Video" || true

print_header "Test 5: Invalid inputs"
run_test 5 "Should reject invalid video ID" 1 "${ADDVIDEO_SCRIPT}" "invalid" "Test" || true
run_test 5 "Should reject missing caption" 1 "${ADDVIDEO_SCRIPT}" "dQw4w9WgXcQ" || true

print_header "Running genmonth sanity tests"

print_header "Test 6: Version flag"
run_test 6 "Should show version with -v" 0 "${GENMONTH_SCRIPT}" -v
run_test 6 "Should show version with --version" 0 "${GENMONTH_SCRIPT}" --version

print_header "Test 7: Help/usage"
run_test 7 "Should show usage with no args" 1 "${GENMONTH_SCRIPT}" || true
run_test 7 "Should show usage with -h" 0 "${GENMONTH_SCRIPT}" -h
run_test 7 "Should show usage with --help" 0 "${GENMONTH_SCRIPT}" --help

print_header "Test 8: Dry run mode"
run_test 8 "Should run dry mode with -n" 0 "${GENMONTH_SCRIPT}" -n "$TEST_MONTH" "$TEST_YEAR"
run_test 8 "Should run dry mode with --dry-run" 0 "${GENMONTH_SCRIPT}" --dry-run "$TEST_MONTH" "$TEST_YEAR"

print_header "Test 9: Debug mode"
run_test 9 "Should enable debug with -d" 0 "${GENMONTH_SCRIPT}" -d "$TEST_MONTH" "$TEST_YEAR" || true
run_test 9 "Should enable debug with --debug" 0 "${GENMONTH_SCRIPT}" --debug "$TEST_MONTH" "$TEST_YEAR" || true

print_header "Test 10: Invalid inputs"
run_test 10 "Should reject invalid month (0)" 1 "${GENMONTH_SCRIPT}" 0 "$TEST_YEAR" || true
run_test 10 "Should reject invalid month (13)" 1 "${GENMONTH_SCRIPT}" 13 "$TEST_YEAR" || true
run_test 10 "Should reject invalid year (short)" 1 "${GENMONTH_SCRIPT}" "$TEST_MONTH" 23 || true
run_test 10 "Should reject non-numeric month" 1 "${GENMONTH_SCRIPT}" "Jan" "$TEST_YEAR" || true
run_test 10 "Should reject non-numeric year" 1 "${GENMONTH_SCRIPT}" "$TEST_MONTH" "TwoThousand" || true

print_header "Test 11: File generation"
run_test 11 "Should generate markdown file" 0 "${GENMONTH_SCRIPT}" "$TEST_MONTH" "$TEST_YEAR"
run_test 11 "Generated file should exist" 0 test -f "January.md"

print_header "Test 12: Append year option"
run_test 12 "Should generate file with year when --append-year" 0 "${GENMONTH_SCRIPT}" --append-year "$TEST_MONTH" "$TEST_YEAR"
run_test 12 "Year-appended file should exist" 0 test -f "January2023.md"

print_header "All tests completed successfully"
