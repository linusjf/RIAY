#!/usr/bin/env bash
# Sanity tests for video processing scripts
# Tests command line options and cleans up afterwards

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME=$(basename "$0")

# Import required libraries
readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/date.sh"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
source "${SCRIPT_DIR}/lib/color.sh"

# Configuration
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

# Test counters
declare -i total_tests=0
declare -i passed_tests=0
declare -i skipped_tests=0
declare -i failed_tests=0

# Command line options
declare -i start_from=1
declare -a tests_to_run=()
declare no_cleanup=false
declare stop_on_failure=false

###############################################################################
# Helper functions
###############################################################################

version() {
  printf "%s\n" "$VERSION"
}

usage() {
  local exitcode="${1:-0}"
  cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS]

Run sanity tests for video processing scripts

Options:
  --from-test NUM    Start running tests from test number NUM
  --tests TESTLIST   Comma-separated list of specific tests to run
  --no-cleanup       Don't clean up test files after running
  --stop-on-failure  Stop test execution on first failure
  --help             Show this help message
  --version          Show version information

Available tests:
  1-5    addvideo script tests
  6-11   genmonth script tests
  12-16  gentoc script tests
  17-23  stitch script tests
  24-28  lintall script tests
  29-34  addvideotoday script tests
  35-39  addimgtoday script tests
  40-43  cleanup script tests
  44-47  saveplaylist script tests
  48-52  compact script tests
  53-58  addsummariestodays script tests

Examples:
  ${SCRIPT_NAME} --from-test 6    # Run tests starting from test 6
  ${SCRIPT_NAME} --tests 1,3,5    # Run only tests 1, 3 and 5
  ${SCRIPT_NAME}                  # Run all tests
EOF
  exit "$exitcode"
}

print_header() {
  printf "\n\033[1m%s\033[0m\n" "$1"
}

should_run_test() {
  local test_num="$1"
  if [[ ${#tests_to_run[@]} -gt 0 ]]; then
    for t in "${tests_to_run[@]}"; do
      if [[ "$t" == "$test_num" ]]; then
        return 0
      fi
    done
    return 1
  fi
  [[ "$test_num" -ge "$start_from" ]]
}

run_test() {
  local test_num="$1"
  local description="$2"
  local expected_exit="${3:-0}"
  shift 3

  ((total_tests = total_tests + 1))

  if ! should_run_test "$test_num"; then
    printf "  %-50s\033[33mSKIPPED\033[0m\n" "${description}..."
    ((skipped_tests = skipped_tests + 1))
    git restore .
    git clean -fd
    return 0
  fi

  printf "  %-50s" "${description}..."

  local actual_exit=0
  local start_time=$(date +%s.%N)
  "$@" &> /dev/null || actual_exit=$?
  local end_time=$(date +%s.%N)

  git restore .
  git clean -fd &> /dev/null

  if [[ "$actual_exit" -eq "$expected_exit" ]]; then
    printf "\033[32mPASS\033[0m\n"
    ((passed_tests = passed_tests + 1))
  else
    printf "\033[31mFAIL (expected %d, got %d)\033[0m\n" "$expected_exit" "$actual_exit"
    ((failed_tests = failed_tests + 1))
    if [[ "$stop_on_failure" == true ]]; then
      print_test_summary
      exit 1
    fi
    return 1
  fi
  local elapsed_time=$(echo "$end_time - $start_time" | bc)
  >&2 printf "Completed in %.2f seconds\n" "$elapsed_time"
}

print_test_summary() {
  print_header "Test Summary"
  printf "  Total tests:   %d\n" "$total_tests"
  printf "  Passed tests:  \033[32m%d\033[0m\n" "$passed_tests"
  printf "  Skipped tests: \033[33m%d\033[0m\n" "$skipped_tests"
  printf "  Failed tests:  \033[31m%d\033[0m\n" "$failed_tests"

  if [[ "$failed_tests" -gt 0 ]]; then
    printf "\n\033[31mSome tests failed!\033[0m\n"
    return 1
  elif [[ "$passed_tests" -eq 0 && "$skipped_tests" -gt 0 ]]; then
    printf "\n\033[33mAll tests were skipped!\033[0m\n"
    return 0
  else
    printf "\n\033[32mAll tests passed!\033[0m\n"
    return 0
  fi
}

stash_apply_id() {
  local id="$1"
  if git stash list | grep "$id"; then
    local entry=$(git stash list | grep "$id" | head -n1)
    local ref=$(echo "$entry" | sed -n 's/^\(stash@{[0-9]\+}\).*/\1/p')
    if [ -n "$ref" ]; then
      echo "Applying $ref"
      git stash apply "$ref"
      git stash drop "$ref"
    else
      echo "No stash found with ID: $id"
    fi
  else
    echo "No stash found with ID: $id"
  fi
}

cleanup() {
  if [[ "$no_cleanup" == true ]]; then
    print_header "Skipping cleanup (--no-cleanup specified)"
    return
  fi
  if [[ -n "${orig_branch:-}" ]]; then
    print_header "Cleaning up..."
    git reset --hard HEAD~1
    git checkout "$orig_branch"
    git branch -D "testing"
    git restore .
    git clean -fd
    stash_apply_id "$stash_id"
  fi
}

trap cleanup EXIT

###############################################################################
# Main execution
###############################################################################

parse_options() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --from-test)
        start_from="$2"
        shift 2
        ;;
      --tests)
        IFS=',' read -ra tests_to_run <<< "$2"
        shift 2
        ;;
      --no-cleanup)
        no_cleanup=true
        shift
        ;;
      --stop-on-failure)
        stop_on_failure=true
        shift
        ;;
      --help | -h)
        usage
        ;;
      --version | -v)
        version
        exit 0
        ;;
      *)
        echo "Unknown option: $1" >&2
        usage 1
        ;;
    esac
  done
}

setup_test_environment() {
  orig_branch=$(git symbolic-ref --short -q HEAD || echo "detached")
  if [[ "$orig_branch" == "detached" ]]; then
    echo "In detached state" >&2
    exit 1
  fi

  if git show-ref --verify --quiet refs/heads/testing; then
    read -p "Testing branch already exists. Delete it? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      git branch -D testing
    else
      echo "Aborting tests to preserve existing testing branch" >&2
      exit 1
    fi
  fi

  stash_id="stash-$(date +%Y%m%d%H%M%S): sanity tests"
  git stash push -m "$stash_id"
  git checkout -b "testing"
  cp test_config.env config.env
  git add config.env
  git commit -m "Temp: switch to test config"
}

run_all_tests() {
  source "${SCRIPT_DIR}/tests/addvideotests.sh"

  source "${SCRIPT_DIR}/tests/genmonthtests.sh"

  source "${SCRIPT_DIR}/tests/gentoctests.sh"

  source "${SCRIPT_DIR}/tests/stitchtests.sh"

  source "${SCRIPT_DIR}/tests/lintalltests.sh"

  source "${SCRIPT_DIR}/tests/addvideotodaytests.sh"

  source "${SCRIPT_DIR}/tests/addimgtodaytests.sh"

  source "${SCRIPT_DIR}/tests/cleanuptests.sh"

  source "${SCRIPT_DIR}/tests/saveplaylisttests.sh"

  source "${SCRIPT_DIR}/tests/compacttests.sh"

  source "${SCRIPT_DIR}/tests/addsummariestodaystests.sh"
}

main() {
  parse_options "$@"
  setup_test_environment
  run_all_tests
  print_test_summary
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
