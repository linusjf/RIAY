#!/usr/bin/env bash
# Sanity tests for addvideo, genmonth, gentoc and stitch scripts
# Tests command line options and cleans up afterwards

set -euo pipefail
shopt -s inherit_errexit

readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "$SCRIPT_DIR/lockconfig.sh"
lock_config_vars "$SCRIPT_DIR/config.env"
readonly ADDVIDEO_SCRIPT="${SCRIPT_DIR}/addvideo"
readonly GENMONTH_SCRIPT="${SCRIPT_DIR}/genmonth"
readonly GENTOC_SCRIPT="${SCRIPT_DIR}/gentoc"
readonly STITCH_SCRIPT="${SCRIPT_DIR}/stitch"
readonly LINTALL_SCRIPT="${SCRIPT_DIR}/lintall"
readonly ADDVIDEOTODAY_SCRIPT="${SCRIPT_DIR}/addvideotoday"
readonly TEST_MONTH=1
readonly TEST_YEAR=2023
readonly TEST_MD_FILE="test_toc.md"
readonly TEST_STITCH_FILE="test_stitch.md"
readonly TEST_STITCH_CONTENT="stitch.md"

usage() {
  exitcode="${1:-0}"
  cat << EOF
Usage: $0 [OPTIONS]

Run sanity tests for video processing scripts

Options:
  --from-test NUM    Start running tests from test number NUM
  --tests TESTLIST   Comma-separated list of specific tests to run
  --no-cleanup       Don't clean up test files after running
  --help             Show this help message

Available tests:
  1-5    addvideo script tests
  6-12   genmonth script tests
  13-17  gentoc script tests
  18-24  stitch script tests
  25-29  lintall script tests
  30-34  addvideotoday script tests

Examples:
  $0 --from-test 6          # Run tests starting from test 6
  $0 --tests 1,3,5         # Run only tests 1, 3 and 5
  $0                       # Run all tests
EOF
  exit "$exitcode"
}

# Parse command line arguments
START_FROM=1
TESTS_TO_RUN=()
NO_CLEANUP=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    --from-test)
      START_FROM="$2"
      shift 2
      ;;
    --tests)
      IFS=',' read -ra TESTS_TO_RUN <<< "$2"
      shift 2
      ;;
    --no-cleanup)
      NO_CLEANUP=true
      shift
      ;;
    --help | -h)
      usage
      ;;
    *)
      echo "Unknown option: $1"
      usage 1
      ;;
  esac
done

# Test helper functions
print_header() {
  printf "\n\033[1m%s\033[0m\n" "$1"
}

should_run_test() {
  local test_num="$1"
  if [[ ${#TESTS_TO_RUN[@]} -gt 0 ]]; then
    for t in "${TESTS_TO_RUN[@]}"; do
      if [[ "$t" == "$test_num" ]]; then
        return 0
      fi
    done
    return 1
  fi
  [[ "$test_num" -ge "$START_FROM" ]]
}

run_test() {
  local test_num="$1"
  if ! should_run_test "$test_num"; then
    printf "  %-50s\033[33mSKIPPED\033[0m\n" "$2..."
    return 0
  fi
  printf "  %-50s" "$2..."
  shift 2
  expected_exit=${1:-0}
  shift
  git tag -f "$test_num"
  if "$@" &> /dev/null; then
    actual_exit=0
  else
    actual_exit=$?
  fi
  if ! git diff "$test_num" &> /dev/null; then
    git reset --hard "$test_num"
    git clean -fd
  fi
  git tag -d "$test_num"
  if [[ "$actual_exit" -eq "$expected_exit" ]]; then
    printf "\033[32mPASS\033[0m\n"
  else
    printf "\033[31mFAIL (expected %d, got %d)\033[0m\n" "$expected_exit" "$actual_exit"
    return 1
  fi
}

create_test_md() {
  cat << EOF > "${TEST_MD_FILE}"
# Test Document

## Section 1
Content

## Section 2
More content
EOF
}

create_test_stitch() {
  cat << EOF > "${TEST_STITCH_FILE}"
# Test Stitch Document

## Introduction
Test content

## Features
- Feature 1
- Feature 2
EOF
}

create_real_stitch() {
  cat << EOF > "${TEST_STITCH_CONTENT}"
# README

- [RIAY](redme.md)
- [January](January.md)
- [February](February.md)
- [March](March.md)
- [April](April.md)
- [May](May.md)
- [June](June.md)
- [July](July.md)
- [August](August.md)
- [September](September.md)
- [October](October.md)
- [November](November.md)
- [December](December.md)
- [HOWTO](HOWTO.md)
- [SCRIPTS](SCRIPTS.md)
EOF
}

stash_apply_id() {
  id="$1"
  if git stash list | grep "$id"; then
    entry=$(git stash list | grep "$id" | head -n1)
    ref=$(echo "$entry" | sed -n 's/^\(stash@{[0-9]\+}\).*/\1/p')
    if [ -n "$ref" ]; then
      echo "Applying $ref"
      git stash apply "$ref"
      git stash drop "$ref"
    else
      echo "No stash found with ID: $id"
    fi
  else
    echo "No stash found with ID: $id"
  fi
}

cleanup() {
  if [[ "$NO_CLEANUP" == true ]]; then
    print_header "Skipping cleanup (--no-cleanup specified)"
    return
  fi
  print_header "Cleaning up..."
  git checkout "$orig_branch"
  git branch -D "testing"
  git restore .
  git clean -fd
  stash_apply_id "$stash_id"
}

trap cleanup EXIT

orig_branch=$(git symbolic-ref --short -q HEAD || echo "detached")
if [[ "$orig_branch" == "detached" ]]; then
  echo "In detached state" >&2
  exit 1
fi

# Check if testing branch exists
if git show-ref --verify --quiet refs/heads/testing; then
  read -p "Testing branch already exists. Delete it? [y/N] " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    git branch -D testing
  else
    echo "Aborting tests to preserve existing testing branch"
    exit 1
  fi
fi

stash_id="stash-$(date +%Y%m%d%H%M%S): sanity tests"
git stash push -m "$stash_id"
git checkout -b "testing"

# Main test execution
print_header "Running addvideo sanity tests"

print_header "Test 1: Version flag"
run_test 1 "Should show version with -v" 0 "${ADDVIDEO_SCRIPT}" -v
run_test 1 "Should show version with --version" 0 "${ADDVIDEO_SCRIPT}" --version

print_header "Test 2: Help/usage"
run_test 2 "Should show usage with no args" 1 "${ADDVIDEO_SCRIPT}" || true
run_test 2 "Should show usage with -h" 0 "${ADDVIDEO_SCRIPT}" -h
run_test 2 "Should show usage with --help" 0 "${ADDVIDEO_SCRIPT}" --help

print_header "Test 3: Dry run mode"
run_test 3 "Should run dry mode with -n" 0 "${ADDVIDEO_SCRIPT}" -n "CfU7rIufywo" "Test Video"
run_test 3 "Should run dry mode with --dry-run" 0 "${ADDVIDEO_SCRIPT}" --dry-run "CfU7rIufywo" "Test Video"

print_header "Test 4: Debug mode"
run_test 4 "Should enable debug with -d" 0 "${ADDVIDEO_SCRIPT}" -d "Io1G_5I7a-0" "Test Video" || true
run_test 4 "Should enable debug with --debug" 0 "${ADDVIDEO_SCRIPT}" --debug "2-caLO3rLL8" "News Video" || true

print_header "Test 5: Invalid inputs"
run_test 5 "Should reject invalid video ID" 1 "${ADDVIDEO_SCRIPT}" "invalid" "Test" || true
run_test 5 "Should reject missing caption" 1 "${ADDVIDEO_SCRIPT}" "dQw4w9WgXcQ" || true

print_header "Running genmonth sanity tests"

print_header "Test 6: Version flag"
run_test 6 "Should show version with -v" 0 "${GENMONTH_SCRIPT}" -v
run_test 6 "Should show version with --version" 0 "${GENMONTH_SCRIPT}" --version

print_header "Test 7: Help/usage"
run_test 7 "Should show usage with no args" 1 "${GENMONTH_SCRIPT}" || true
run_test 7 "Should show usage with -h" 0 "${GENMONTH_SCRIPT}" -h
run_test 7 "Should show usage with --help" 0 "${GENMONTH_SCRIPT}" --help

print_header "Test 8: Dry run mode"
run_test 8 "Should run dry mode with -n" 0 "${GENMONTH_SCRIPT}" -n "$TEST_MONTH" "$TEST_YEAR"
run_test 8 "Should run dry mode with --dry-run" 0 "${GENMONTH_SCRIPT}" --dry-run "$TEST_MONTH" "$TEST_YEAR"
run_test 8 "Should run dry mode with -n" 0 "${GENMONTH_SCRIPT}" -n "$TEST_MONTH"
run_test 8 "Should run dry mode with --dry-run" 0 "${GENMONTH_SCRIPT}" --dry-run "$TEST_MONTH"

print_header "Test 9: Debug mode"
run_test 9 "Should enable debug with -d" 0 "${GENMONTH_SCRIPT}" -d "$TEST_MONTH" "$TEST_YEAR" || true
run_test 9 "Should enable debug with --debug" 0 "${GENMONTH_SCRIPT}" --debug "$TEST_MONTH" "$TEST_YEAR" || true
run_test 9 "Should enable debug with -d" 0 "${GENMONTH_SCRIPT}" -d "$TEST_MONTH" || true
run_test 9 "Should enable debug with --debug" 0 "${GENMONTH_SCRIPT}" --debug "$TEST_MONTH" || true

print_header "Test 10: Invalid inputs"
run_test 10 "Should reject invalid month (0)" 1 "${GENMONTH_SCRIPT}" 0 "$TEST_YEAR" || true
run_test 10 "Should reject invalid month (13)" 1 "${GENMONTH_SCRIPT}" 13 "$TEST_YEAR" || true
run_test 10 "Should reject invalid year (short)" 1 "${GENMONTH_SCRIPT}" "$TEST_MONTH" 23 || true
run_test 10 "Should reject non-numeric month" 1 "${GENMONTH_SCRIPT}" "Jan" "$TEST_YEAR" || true
run_test 10 "Should reject non-numeric year" 1 "${GENMONTH_SCRIPT}" "$TEST_MONTH" "TwoThousand" || true

print_header "Test 11: File generation"
run_test 11 "Should generate markdown file" 0 "${GENMONTH_SCRIPT}" "$TEST_MONTH" "$TEST_YEAR"
run_test 11 "Generated file should exist" 0 test -f "January.md"
rm -f January.md
run_test 11 "Should generate markdown file" 0 "${GENMONTH_SCRIPT}" "$TEST_MONTH"
run_test 11 "Generated file should exist" 0 test -f "January.md"

print_header "Test 12: Append year option"
run_test 12 "Should generate file with year when --append-year" 0 "${GENMONTH_SCRIPT}" --append-year "$TEST_MONTH" "$TEST_YEAR"
run_test 12 "Year-appended file should exist" 0 test -f "January2023.md"
run_test 12 "Should generate file with year when --append-year" 0 "${GENMONTH_SCRIPT}" --append-year "$TEST_MONTH"
run_test 12 "Year-appended file should exist" 0 test -f "January${YEAR}.md"

print_header "Running gentoc sanity tests"

print_header "Test 13: Version flag"
run_test 13 "Should show version with -v" 0 "${GENTOC_SCRIPT}" -v
run_test 13 "Should show version with --version" 0 "${GENTOC_SCRIPT}" --version

print_header "Test 14: Help/usage"
run_test 14 "Should show usage with no args" 1 "${GENTOC_SCRIPT}" || true
run_test 14 "Should show usage with -h" 0 "${GENTOC_SCRIPT}" -h
run_test 14 "Should show usage with --help" 0 "${GENTOC_SCRIPT}" --help

print_header "Test 15: Debug mode"
run_test 15 "Should enable debug with -d" 1 "${GENTOC_SCRIPT}" -d "${TEST_MD_FILE}" || true
run_test 15 "Should enable debug with --debug" 1 "${GENTOC_SCRIPT}" --debug "${TEST_MD_FILE}" || true

print_header "Test 16: Invalid inputs"
run_test 16 "Should reject missing file argument" 1 "${GENTOC_SCRIPT}" || true
run_test 16 "Should reject non-existent file" 1 "${GENTOC_SCRIPT}" nonexistent.md || true

print_header "Test 17: TOC generation"
create_test_md
run_test 17 "Should generate TOC for valid file" 0 "${GENTOC_SCRIPT}" "${TEST_MD_FILE}"

print_header "Running stitch sanity tests"

print_header "Test 18: Version flag"
run_test 18 "Should show version with -v" 0 "${STITCH_SCRIPT}" -v
run_test 18 "Should show version with --version" 0 "${STITCH_SCRIPT}" --version

print_header "Test 19: Help/usage"
run_test 19 "Should show usage with no args" 0 "${STITCH_SCRIPT}"
run_test 19 "Should show usage with -h" 0 "${STITCH_SCRIPT}" -h
run_test 19 "Should show usage with --help" 0 "${STITCH_SCRIPT}" --help

print_header "Test 20: Debug mode"
run_test 20 "Should enable debug with -d" 0 "${STITCH_SCRIPT}" -d || true
run_test 20 "Should enable debug with --debug" 0 "${STITCH_SCRIPT}" --debug || true

print_header "Test 21: Input validation"
run_test 21 "Should pass with no parameters" 0 "${STITCH_SCRIPT}"

print_header "Test 22: Basic file generation"
create_test_stitch
mv "${TEST_STITCH_FILE}" stitch.md
run_test 22 "Should not generate README.md with wrong file format" 2 "${STITCH_SCRIPT}" || true

print_header "Test 23: Real-world file generation"
create_real_stitch
run_test 23 "Should generate README from real stitch.md" 0 "${STITCH_SCRIPT}"

print_header "Test 24: Missing stitch.md"
rm -f stitch.md
run_test 24 "Should fail when stitch.md is missing" 1 "${STITCH_SCRIPT}" || true

print_header "Running lintall sanity tests"

print_header "Test 25: Version flag"
run_test 25 "Should have a version flag" 0 "${LINTALL_SCRIPT}" --version || true

print_header "Test 26: Help/usage"
run_test 26 "Should show usage with -h" 0 "${LINTALL_SCRIPT}" -h
run_test 26 "Should show usage with --help" 0 "${LINTALL_SCRIPT}" --help

print_header "Test 27: Debug mode"
run_test 27 "Should enable debug with -d" 0 "${LINTALL_SCRIPT}" -d || true
run_test 27 "Should enable debug with --debug" 0 "${LINTALL_SCRIPT}" --debug || true

print_header "Test 28: Verbose mode"
run_test 28 "Should enable verbose with -v" 0 "${LINTALL_SCRIPT}" -v || true
run_test 28 "Should enable verbose with --verbose" 0 "${LINTALL_SCRIPT}" --verbose || true

print_header "Test 29: Basic execution"
run_test 29 "Should run successfully" 0 "${LINTALL_SCRIPT}"

print_header "Running addvideotoday sanity tests"

print_header "Test 30: Version flag"
run_test 30 "Should show version with -v" 0 "${ADDVIDEOTODAY_SCRIPT}" -v
run_test 30 "Should show version with --version" 0 "${ADDVIDEOTODAY_SCRIPT}" --version

print_header "Test 31: Help/usage"
run_test 31 "Should show usage with no args" 1 "${ADDVIDEOTODAY_SCRIPT}" || true
run_test 31 "Should show usage with -h" 0 "${ADDVIDEOTODAY_SCRIPT}" -h
run_test 31 "Should show usage with --help" 0 "${ADDVIDEOTODAY_SCRIPT}" --help

print_header "Test 32: Invalid inputs"
run_test 32 "Should reject invalid number of arguments" 1 "${ADDVIDEOTODAY_SCRIPT}" "dQw4w9WgXcQ" || true
run_test 32 "Should reject invalid video ID" 1 "${ADDVIDEOTODAY_SCRIPT}" "invalid" "1" || true
run_test 32 "Should reject invalid day number" 1 "${ADDVIDEOTODAY_SCRIPT}" "dQw4w9WgXcQ" "invalid" || true

print_header "Test 33: Missing markdown file"
run_test 33 "Should fail due to missing markdown file" 1 "${ADDVIDEOTODAY_SCRIPT}" "dQw4w9WgXcQ" "999" || true

print_header "Test 34: Basic execution"
run_test 34 "Should run successfully" 0 "${ADDVIDEOTODAY_SCRIPT}" "dQw4w9WgXcQ" "1"

print_header "All tests completed successfully"
