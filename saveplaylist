#!/usr/bin/env bash

# YouTube playlist video ID extractor
# Fetches all video IDs from a YouTube playlist using the YouTube Data API
# and saves them to a text file.

readonly SCRIPT_NAME="$(basename "$0")"
readonly VERSION="1.0.0"
readonly BASE_URL="https://www.googleapis.com/youtube/v3/playlistItems"
readonly MAX_RESULTS=50

verbose=false

if command -v realpath > /dev/null 2>&1; then
  readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
else
  readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)"
fi

# Source required libraries
source "$SCRIPT_DIR/require.sh"
source "$SCRIPT_DIR/util.sh"
source "$SCRIPT_DIR/lockconfig.sh"
source "$SCRIPT_DIR/curl.sh"

# Check required commands
require_commands jq

# Load and lock config
lockconfig::lock_config_vars "$SCRIPT_DIR/config.env"

usage() {
  local exit_code="${1:-0}"
  if [[ "$exit_code" -eq 0 ]]; then
    out "Usage: $SCRIPT_NAME [OPTIONS] PLAYLIST_ID"
    out ""
    out "Options:"
    out "  -h, --help      Show this help message and exit"
    out "  -v, --verbose   Enable verbose mode"
    out "  --version       Show script version and exit"
    out ""
    out "Arguments:"
    out "  PLAYLIST_ID   The ID of the YouTube playlist"
    out ""
    out "Examples:"
    out "  $SCRIPT_NAME PL4iIJvj6ypuG9v3Kg80Qt2ZUnspPHvXO"
    out "  $SCRIPT_NAME -v PL4iIJvj6ypuG9v3Kg80Qt2ZUnspPHvXO"
  else
    err "Usage: $SCRIPT_NAME [OPTIONS] PLAYLIST_ID"
  fi
  exit "$exit_code"
}

version() {
  out "$VERSION"
}

check_playlist_exists() {
  local playlist_id="$1"
  local url="https://www.googleapis.com/youtube/v3/playlists?part=id&id=${playlist_id}&key=${YOUTUBE_API_KEY}"

  if $verbose; then
    out "Checking playlist existence: $url"
  fi

  local response
  if ! response="$(curl::safe_curl_request "$url" "GET")"; then
    err "Error: Failed to check playlist existence."
    return 1
  fi

  local item_count=$(echo "$response" | jq '.items | length')
  if [[ "$item_count" -eq 0 ]]; then
    err "Error: Playlist '$playlist_id' not found or not accessible."
    return 1
  fi

  return 0
}

save_playlist() {
  local playlist_id="$1"
  local next_page_token=""

  # Clear or create the output file
  true > "$VIDEOS_FILE"

  while :; do
    # Build the API request URL - now including snippet to get video titles
    local url="${BASE_URL}?part=contentDetails,snippet&playlistId=${playlist_id}&maxResults=${MAX_RESULTS}&key=${YOUTUBE_API_KEY}"

    if [[ -n "$next_page_token" ]]; then
      url="${url}&pageToken=${next_page_token}"
    fi

    if $verbose; then
      out "Fetching URL: $url"
    fi

    # Fetch the response using safe_curl_request
    local response
    if ! response="$(curl::safe_curl_request "$url" "GET")"; then
      err "Error: Failed to fetch playlist data."
      return 1
    fi

    # Process each item in the response
    local items_count=$(echo "$response" | jq '.items | length')
    for ((i = 0; i < items_count; i++)); do
      local video_id="$(echo "$response" | jq -r ".items[$i].contentDetails.videoId")"
      local title="$(echo "$response" | jq -r ".items[$i].snippet.title")"
      local privacy_status="$(echo "$response" | jq -r ".items[$i].status.privacyStatus // \"public\"")"

      # Skip hidden videos and videos without titles starting with 'Day'
      if [[ "$privacy_status" != "private" && "$title" == Day* ]]; then
        echo "$video_id" >> "$VIDEOS_FILE"
      elif $verbose; then
        out "Skipping video: $video_id (Title: '$title', Status: $privacy_status)"
      fi
    done

    # Get the next page token
    next_page_token=$(echo "$response" | jq -r '.nextPageToken')

    # Stop if there is no next page
    if [[ "$next_page_token" == "null" ]]; then
      break
    fi
  done

  out "Filtered video IDs saved to $VIDEOS_FILE"
  return 0
}

trap_exit() {
  # Add any cleanup here
  out "Exiting..."
}
trap trap_exit EXIT

main() {
  local playlist_id

  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        usage 0
        ;;
      -v | --verbose)
        verbose=true
        ;;
      --version)
        version
        exit 0
        ;;
      *)
        if [[ -z "${playlist_id:-}" ]]; then
          playlist_id="$1"
        else
          err "Error: Too many arguments."
          usage 1
        fi
        ;;
    esac
    shift
  done

  if [[ -z "${playlist_id:-}" ]]; then
    err "Error: Missing playlist ID."
    usage 1
  fi

  # Check required environment variables
  require_vars YOUTUBE_API_KEY VIDEOS_FILE

  # Check if playlist exists before proceeding
  if ! check_playlist_exists "$playlist_id"; then
    exit 1
  fi

  if ! save_playlist "$playlist_id"; then
    err "Error: $SCRIPT_NAME failed with exit code $?"
    exit 1
  fi
  exit 0
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
