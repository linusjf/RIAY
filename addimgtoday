#!/usr/bin/env bash

# Description: This script appends image markdown to a specified markdown file.
# It validates inputs, resolves paths, and formats the markdown output.

set -euo pipefail
shopt -s inherit_errexit

# Constants
readonly VERSION="1.0.0"
readonly SCRIPT_NAME=$(basename "$0")
readonly DEFAULT_EXIT_CODE=0

# Error codes
readonly ERR_MISSING_ENV=1
readonly ERR_MISSING_ARGS=2
readonly ERR_INVALID_PATH=3
readonly ERR_INVALID_IMAGE=4
readonly ERR_MARKDOWN_FILE=5
readonly ERR_INVALID_DAY=6
readonly ERR_GENERATING_MD=7

# Source common functions
if command -v realpath > /dev/null 2>&1; then
  readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
else
  readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" &> /dev/null && pwd -P)"
fi
source "${SCRIPT_DIR}/lib/date.sh"
source "${SCRIPT_DIR}/lib/filetypes.sh"
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
source "${SCRIPT_DIR}/lib/git.sh"

# Load configuration variables
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

# Check for required environment variable
if [[ -z "${YEAR:-}" ]]; then
  err "Error: YEAR environment variable not set."
  exit $ERR_MISSING_ENV
fi

# Usage function
usage() {
  local exitcode="${1:-$DEFAULT_EXIT_CODE}"
  cat << EOF
Usage: $SCRIPT_NAME [OPTIONS] <image_path> <caption> <day_number>

Appends image markdown to a specified markdown file.

Arguments:
  image_path      Path to the image file (JPEG format)
  caption         Caption for the image
  day_number      Day number (1-366)

Options:
  -h, --help      Show this help message and exit
  -v, --version   Show script version and exit
  -d, --debug     Enable debug mode

Exit Codes:
  0               Success
  1               Missing required environment variable
  2               Missing required arguments
  3               Invalid image path
  4               Invalid image format (not JPEG)
  5               Markdown file not found
  6               Invalid day number (1 - 366)
  7               Error generating markdown

Examples:
  $SCRIPT_NAME /path/to/image.jpg "My Image Caption" 123
  $SCRIPT_NAME --help
  $SCRIPT_NAME -v

EOF
  if [[ "$exitcode" -eq "$DEFAULT_EXIT_CODE" ]]; then
    out "$(<&0)"
  else
    err "$(<&0)"
  fi
  exit "$exitcode"
}

# Function to get the script's version
version() {
  out "$VERSION"
}

# Function to append image markdown to the file
append_image_markdown() {
  local day_num="$1"
  local image_path="$2"
  local caption="$3"

  # Format paths and strings
  printf -v day_string "Day%03d" "$day_num"
  local month=$(date -d "${YEAR}-01-01 +$((day_num - 1)) days" +"%B")
  local markdown_file="$month/${day_string}.md"

  # Verify markdown file exists
  if [[ ! -f "$markdown_file" ]]; then
    err "Error: Markdown file '$markdown_file' does not exist."
    return $ERR_MARKDOWN_FILE
  fi

  # Append image markdown
  {
    out ""
    out "### ${caption}"
    out ""
    out "![${caption}](/${image_path})"
  } >> "$markdown_file"

  out "Appended image markdown to $markdown_file"

  if "${SCRIPT_DIR}/genmonth" "$(date::monthnumberfrommonth "$month")" && "${SCRIPT_DIR}/stitch"; then
    return 0
  fi
  return $ERR_GENERATING_MD
}

check_path_under_current_dir() {
  local input_path="$1"
  local abs_path

  # Resolve to absolute path
  abs_path="$(realpath "$input_path" 2> /dev/null)" || {
    err "Error: Invalid path: $abs_path"
    return $ERR_INVALID_PATH
  }

  # Get current directory's absolute path
  local current_dir
  current_dir="$(realpath .)"

  # Check if the path is under current directory
  if [[ "$abs_path" == "$current_dir"* ]] && [[ -f "$abs_path" ]]; then
    out "Valid and under current directory"
    return 0
  else
    err "Not under current directory"
    return $ERR_INVALID_PATH
  fi
}

# Main function
main() {
  local day_num image_path caption
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        usage
        ;;
      -v | --version)
        version
        exit 0
        ;;
      -d | --debug)
        set -x
        shift
        ;;
      *)
        if [[ -z "${image_path:-}" ]]; then
          image_path="$1"
        elif [[ -z "${caption:-}" ]]; then
          caption="$1"
        elif [[ -z "${day_num:-}" ]]; then
          day_num="$1"
        else
          err "Error: Too many arguments."
          usage $ERR_MISSING_ARGS
        fi
        shift
        ;;
    esac
  done

  # Check if all arguments are provided
  if [[ -z "${image_path:-}" || -z "${caption:-}" || -z "${day_num:-}" ]]; then
    err "Error: Missing arguments."
    usage $ERR_MISSING_ARGS
  fi

  # Check if day number is numeric and in range
  date::validate_daynumber "$day_num" "$YEAR" \
    || usage $ERR_INVALID_DAY

  if [[ -z "${image_path:-}" || -z "${caption:-}" || -z "${day_num:-}" ]]; then
    err "Error: Missing arguments."
    usage $ERR_MISSING_ARGS
  fi

  # Validate image file exists
  if ! check_path_under_current_dir "$image_path"; then
    err "Error: Image file '$image_path' does not exist or is not under current dir: $(pwd -P)."
    exit $ERR_INVALID_PATH
  fi

  filetypes::is_jpeg_file "$image_path" \
    || exit $ERR_INVALID_IMAGE

  # Call the function to append the markdown
  append_image_markdown "$day_num" "$image_path" "$caption"
}

# Call the main function if the script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands tee date cat realpath
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
