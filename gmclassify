#!/usr/bin/env bash
image="$1"

if [[ ! -f "$image" ]]; then
  echo "❌ File not found: $image"
  exit 1
fi

# Step 1: Check if it's truly grayscale
channels=$(gm identify -format "%[channels]" "$image" 2> /dev/null)

if [[ "$channels" == "gray" ]]; then
  # Possibly monochrome?
  count=$(gm convert "$image" -colorspace gray -depth 8 -format "%c" histogram:info: | wc -l)
  if [[ "$count" -le 2 ]]; then
    echo "🖤 Monochrome (black & white)"
  else
    echo "⚫ Grayscale"
  fi
  exit 0
fi

# Step 2: Try downsampling to 1x1 and checking RGB value for approximate color tone
avg_color=$(gm convert "$image" -resize 1x1\! txt:- | grep -oE '#[0-9A-Fa-f]{6}')

if [[ -z "$avg_color" ]]; then
  echo "❓ Could not determine average color."
  exit 1
fi

# Extract RGB components
r_hex=${avg_color:1:2}
g_hex=${avg_color:3:2}
b_hex=${avg_color:5:2}

r=$((16#$r_hex))
g=$((16#$g_hex))
b=$((16#$b_hex))

echo "🔎 Avg RGB: R=$r G=$g B=$b"

# Step 3: Classification rules
rg_diff=$((r > g ? r - g : g - r))
gb_diff=$((g > b ? g - b : b - g))

if [[ "$rg_diff" -lt 5 && "$gb_diff" -lt 5 ]]; then
  echo "⚫ Visually Grayscale (but encoded RGB)"
elif [[ "$r" -gt "$g" && "$g" -gt "$b" && $((r - b)) -gt 30 ]]; then
  echo "🤎 Sepia tone likely"
else
  echo "🌈 Full color"
fi
