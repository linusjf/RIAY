#!/usr/bin/env bash

# Generate and add an AI-generated summary image for a given day of year
# Uses DEEPINFRA_TOKEN to generate images via AI
# Creates image file in month directory and adds reference to daily log

set -eEuo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Exit code definitions
readonly EXIT_SUCCESS=0
readonly EXIT_INVALID_ARGS=1
readonly EXIT_FILE_READ_ERROR=2
readonly EXIT_PROMPT_ERROR=3
readonly EXIT_CAPTION_ERROR=4
readonly EXIT_DATE_ERROR=5
readonly EXIT_IMAGE_GEN_ERROR=6
readonly EXIT_FILE_COPY_ERROR=7
readonly EXIT_ADD_IMAGE_ERROR=8
readonly EXIT_REQUIREMENTS_ERROR=10
readonly EXIT_INVALID_JSON=11
readonly EXIT_FILE_CONVERT_ERROR=12
readonly EXIT_INVALID_DAY=13

######################################################################
# Functions
######################################################################

version() {
  printf "%s\n" "$VERSION"
}

usage() {
  cat << EOF
Usage: ${SCRIPT_NAME} [options] <path_to_prompt_file>

Options:
  -v, --version    Show version information
  -h, --help       Show this help message

Exit Codes:
  0  - Success
  1  - Invalid arguments
  2  - Failed to read summary prompt file
  3  - Failed to get image prompt
  4  - Failed to get caption
  5  - Failed to get month from DOY
  6  - Image generation failed
  7  - Failed to copy image to destination
  8  - Failed to add image to daily log
  9  - Failed to remove temporary image file
  10 - Missing requirements
  11 - Invalid JSON format or missing required fields
  12 - Failed to convert file to jpeg format
  13 - Invalid day number in filename

Examples:
  ${SCRIPT_NAME} January/Day123ImagePrompt.json
EOF
}

validate_json() {
  local json="$1"
  if ! jq -e '.caption and .image_prompt' <<< "$json" > /dev/null 2>&1; then
    die "Invalid JSON format - must contain both .caption and .image_prompt fields" $EXIT_INVALID_JSON
  fi
  if jq -e '.caption == "" or .image_prompt == ""' <<< "$json" > /dev/null 2>&1; then
    die "Invalid JSON content - .caption and .image_prompt must not be empty" $EXIT_INVALID_JSON
  fi
}

extract_day_number() {
  local filename=$(basename "$1")
  if [[ "$filename" =~ Day([0-9]{3})ImagePrompt\.json ]]; then
    local day_num="${BASH_REMATCH[1]}"
    # Remove leading zeros
    day_num=$((10#$day_num))
    # shellcheck disable=SC2153
    date::validate_daynumber "$day_num" "$YEAR" || die "Invalid day number $day_num for year $YEAR" $EXIT_INVALID_DAY
    echo "$day_num"
  else
    die "Filename must be in format DayXXXImagePrompt.json" $EXIT_INVALID_DAY
  fi
}

trap_exit() {
  local exitcode=$?
  if [[ -n "${start_time:-}" ]]; then
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    if [[ $exitcode -eq "$EXIT_SUCCESS" ]]; then
      echo "Generated image from summary in ${duration} seconds" >&2
    else
      echo "Image generation from summary failed. Time taken: ${duration} seconds" >&2
    fi
  fi
  exit $exitcode
}

trap trap_exit EXIT

main() {
  local prompt_file="$1"
  local doy=$(extract_day_number "$prompt_file")
  local month generated_image jpeg_filename prompt caption json wrapped_prompt

  json="$(cat "${prompt_file}")" || die "Failed to read ${prompt_file}" $EXIT_FILE_READ_ERROR
  validate_json "$json"
  prompt="$(imageprompt::get_prompt "$json")" || die "Failed to get image prompt" $EXIT_PROMPT_ERROR
  caption="$(imageprompt::get_caption "$json")" || die "Failed to get caption" $EXIT_CAPTION_ERROR

  month="$(date::mfromdoy "$doy" "$YEAR")" || die "Failed to get month from DOY" $EXIT_DATE_ERROR
  if moderated_response="$("${SCRIPT_DIR}/moderateprompt.py" "$prompt")"; then
    generated_image="$("${SCRIPT_DIR}/${IMAGE_GENERATION_SCRIPT}" "$prompt" || die "Image generation failed" $EXIT_IMAGE_GEN_ERROR)"
    jpeg_filename="${month}/jpgs/Day$(printf "%03d" "${doy}")Summary.jpg"
    cp "$generated_image" "$jpeg_filename" || die "Failed to copy image to ${jpeg_filename}" $EXIT_FILE_COPY_ERROR
    gm convert "$jpeg_filename" "$jpeg_filename" || die "Failed to convert image to jpeg format" $EXIT_FILE_CONVERT_ERROR
    "${SCRIPT_DIR}/addimgtoday" "$jpeg_filename" "AI-Generated Image: ${caption}" "$doy" || die "Failed to add image" $EXIT_ADD_IMAGE_ERROR
    rm -f "$generated_image" || warn "Failed to remove temporary image file"
  else
    echo "Prompt: '$wrapped_prompt' failed the content moderation policy used by OpenAI. Image not generated." >&2
    echo "$moderated_response" >&2
  fi
  return 0
}

######################################################################
# Main script execution
######################################################################

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  case "${1:-}" in
    -v | --version)
      version
      exit $EXIT_SUCCESS
      ;;
    -h | --help)
      usage
      exit $EXIT_SUCCESS
      ;;
  esac

  if command -v realpath > /dev/null 2>&1; then
    readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
  else
    readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" && pwd -P)"
  fi

  source "${SCRIPT_DIR}/lib/require.sh" || exit $EXIT_REQUIREMENTS_ERROR
  source "${SCRIPT_DIR}/lib/internet.sh" || exit $EXIT_REQUIREMENTS_ERROR
  source "${SCRIPT_DIR}/lib/imageprompt.sh" || exit $EXIT_REQUIREMENTS_ERROR
  source "${SCRIPT_DIR}/lib/date.sh" || exit $EXIT_REQUIREMENTS_ERROR
  source "${SCRIPT_DIR}/lib/lockconfig.sh" || exit $EXIT_REQUIREMENTS_ERROR

  lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env" || exit $EXIT_REQUIREMENTS_ERROR

  require_vars DEEPINFRA_TOKEN YEAR IMAGE_GENERATION_SCRIPT YEAR || exit $EXIT_REQUIREMENTS_ERROR

  require_commands sed basename date tee mv wc cat cp jq gm || exit $EXIT_REQUIREMENTS_ERROR

  if [[ "$#" -ne 1 ]]; then
    usage >&2
    exit $EXIT_INVALID_ARGS
  fi

  readonly start_time=$(date +%s)
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
