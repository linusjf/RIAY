#!/usr/bin/env bash
# Extracts captions from YouTube VTT files

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Exit codes
readonly EXIT_SUCCESS=0
readonly EXIT_ARG_ERROR=1
readonly EXIT_INPUT_ERROR=2
readonly EXIT_EXTRACTION_ERROR=3

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/youtube.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-$EXIT_ARG_ERROR}
  local output=${exit_code:-1}
  if [[ $exit_code -eq $EXIT_SUCCESS ]]; then
    output=1
  else
    output=2
  fi

  >&"$output" cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <input.vtt>

Options:
  -d, --debug             Enable debug output
  --verbose               Enable verbose output
  -o, --output <file>     Output file (default: <input>.txt)
  --version               Show version information
  --help                  Show this help message

Examples:
  ${SCRIPT_NAME} captions.en.vtt
  ${SCRIPT_NAME} -o output.txt captions.en.vtt
EOF

  exit "$exit_code"
}

function main() {
  local verbose=false
  local output_file=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --debug)
        set -x
        shift
        ;;
      -o | --output)
        output_file="$2"
        shift 2
        ;;
      --version)
        version
        exit $EXIT_SUCCESS
        ;;
      --verbose)
        verbose=true
        shift
        ;;
      --help) usage $EXIT_SUCCESS ;;
      --)
        shift
        break
        ;;
      -*) usage $EXIT_ARG_ERROR ;;
      *) break ;;
    esac
  done

  if [[ $# -eq 0 ]]; then
    usage $EXIT_ARG_ERROR
  fi

  local input_file="$1"

  if $verbose; then
    >&2 echo "Processing input file: $input_file"
  fi

  if [[ ! -f "$input_file" ]]; then
    die "Error: Input file '$input_file' does not exist" $EXIT_INPUT_ERROR
  fi

  local captions
  captions=$(youtube::extract_text_from_vtt "$input_file")

  if [[ -z "$captions" ]]; then
    die "Error: Failed to extract captions from '$input_file'" $EXIT_EXTRACTION_ERROR
  fi

  if $verbose; then
    >&2 echo "Successfully extracted captions (length: ${#captions} chars)"
  fi

  if [[ -z "$output_file" ]]; then
    output_file="${input_file%.*}.txt"
  fi

  echo "$captions" >| "$output_file"
  echo "$output_file"
  if $verbose; then
    >&2 echo "Captions saved to: $output_file"
  fi

  exit $EXIT_SUCCESS
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands date tee
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
