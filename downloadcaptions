#!/usr/bin/env bash
# Downloads YouTube video captions

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Exit codes
readonly EXIT_SUCCESS=0
readonly EXIT_GENERAL_ERROR=1
readonly EXIT_NO_INTERNET=2
readonly EXIT_NO_VIDEO_ID=3
readonly EXIT_NO_TITLE=4
readonly EXIT_NO_CAPTIONS=5
readonly EXIT_DOWNLOAD_FAILED=6

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/internet.sh"
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/youtube.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-0}
  local output=${exit_code:-1}
  if [[ $exit_code -eq 0 ]]; then
    output=1
  else
    output=2
  fi

  >&"$output" cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <youtube-video-id>

Options:
  -d, --debug             Enable debug output
  --verbose               Enable verbose output
  --version               Show version information
  --help                  Show this help message

Examples:
  ${SCRIPT_NAME} dQw4w9WgXcQ
EOF

  exit "$exit_code"
}

function main() {
  local verbose=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --debug)
        set -x
        shift
        ;;
      --version)
        version
        exit $EXIT_SUCCESS
        ;;
      --verbose)
        verbose=true
        shift
        ;;
      --help) usage $EXIT_SUCCESS ;;
      --)
        shift
        break
        ;;
      -*) usage $EXIT_GENERAL_ERROR ;;
      *) break ;;
    esac
  done

  if [[ $# -eq 0 ]]; then
    usage $EXIT_NO_VIDEO_ID
  fi

  internet::checkinternet || exit $EXIT_NO_INTERNET
  local VIDEO_ID="$1"
  local FILE_PREFIX=""
  local language="en"
  local subtitle_format="vtt"
  local max_tries=3
  local count=0

  require_vars YOUTUBE_API_KEY CAPTIONS_OUTPUT_DIR

  if $verbose; then
    >&2 echo "Starting processing for video ID $VIDEO_ID"
  fi

  local VIDEO_TITLE
  VIDEO_TITLE="$(youtube::get_video_title "$VIDEO_ID" || exit $EXIT_NO_TITLE)"
  if [[ "$VIDEO_TITLE" == null ]]; then
    die "Error: Could not fetch video title" $EXIT_NO_TITLE
  fi

  if $verbose; then
    >&2 echo "Video title retrieved: $VIDEO_TITLE"
  fi

  if ! youtube::has_captions_in_language "$VIDEO_ID" "$language"; then
    die "Error: No captions in English available" $EXIT_NO_CAPTIONS
  fi

  while true; do
    if captions_file="$(youtube::download_captions "$VIDEO_ID" "$FILE_PREFIX" "$CAPTIONS_OUTPUT_DIR" "$language" "$subtitle_format")"; then
      break
    fi
    count=$((count + 1))
    [[ $count -lt $max_tries ]] && sleep $((10 * count)) || break
  done

  if [[ -z "$captions_file" ]] || [[ ! -f "$captions_file" ]]; then
    die "Error: Subtitle file ${captions_file} not found. Not downloaded?" $EXIT_DOWNLOAD_FAILED
  fi

  if $verbose; then
    >&2 echo "Captions downloaded successfully to ${captions_file}"
  fi

  echo "$captions_file"
  exit $EXIT_SUCCESS
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands date tee
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
