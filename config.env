#!/usr/bin/env bash
# Default configuration
# shellcheck disable=all
# Project config values
PROJECT="Rosary In A Year (RIAY)"
# Turn on or turn off logging
LOGGING=false
# Set log level
# takes values notset, debug, info, warning, error and critical
LOGGING_LEVEL=info
# The year in which the podcasts are being followed
# This ensures that the day of the week is aligned with the year
YEAR=2025

# commands file
COMMANDS_FILE="commands.txt"

# Github config values
REPO_OWNER=linusjf
REPO_NAME=RIAY

# overlay icon configuration
ICON_FILE="play-button.png"
ICON_SIZE="256x256"
ICON_OFFSET="+32+0"
ICON_COMMENT="Play Icon Added"

# add videos configuration
COMPACT_FILE="compact.txt"
VIDEOS_FILE="videos.txt"

# curl config values
# Time between successive requests to the LLM models
# This is to minimize triggering of rate limiting
GAP_BW_REQS=0
# Maximum number of retries for a REST API call
CURL_MAX_RETRIES=5
# The initial retry delay of 2 seconds which increases exponentially for each retry
CURL_INITIAL_RETRY_DELAY=2
# In curl, the --connect-timeout option sets how long (in seconds) to wait for the connection phase to the server to complete.
CURL_CONNECT_TIMEOUT=60
# --max-time in curl sets the maximum total time (in seconds) that the whole curl operation (connect + download/upload) is allowed to take.
CURL_MAX_TIME=60
# --the status codes for which retry can be attempted
CURL_RETRY_STATUS_CODES=(408 429 500 502 503 504)
# -- the status codes for which retry headers are to be read
CURL_RETRY_HEADER_STATUS_CODES=(429 503)

# Transcription config values
# whether to transcribe videos using a transcription service or rely on youtube auto-generated captions or creator provided subtitles
TRANSCRIBE_VIDEOS=false
# whether to transcribe locally or not
TRANSCRIBE_LOCALLY=false
# whether to use faster-whisper python library
USE_FASTER_WHISPER=true
# option whether to enable failover mode
ENABLE_FAILOVER_MODE=true

# Automatic Speech Recognition (ASR) LLM config values
# ASR API KEY
ASR_LLM_API_KEY="$DEEPINFRA_API_KEY"
# ASR LLM base url
ASR_LLM_BASE_URL="https://api.deepinfra.com/v1"
# ASR LLM endpoint
# use transcriptions end-point; faster than translations which requires language detection
ASR_LLM_ENDPOINT="/openai/audio/transcriptions"
# ASR LLM model used for transcriptions and translations
ASR_LLM_MODEL="openai/whisper-large-v3"
# ASR LLM model used locally while running whisper via command line
# valid values: tiny, base, small, medium, large, turbo
# as the names suggest memory requirements and parameters used increase as per the model size
# accuracy also improves as the model size increases
# https://github.com/openai/whisper?tab=readme-ov-file#available-models-and-languages
# Note that running ASR locally is several magnitudes slower than executing the web service
# the small model works best with beam_size 5 for accurate transcriptions.
# If you can live with a little inaccuracy, such as poco a poco mistranscribed, it doesn't matter
# since it is omitted by the subsequent summarization prompts, you could use the base model with beam-size 3 for quicker
# local transcriptions. For accuracy, the minimal best config is small with beam size 5
ASR_LOCAL_MODEL="small"
# initial prompt for whisper
ASR_INITIAL_PROMPT="In Ascension Press' Rosary in a Year podcast, Fr. Mark-Mary Ames meditates with sacred art, saint writings, and scripture. Poco a poco."
# carry initial prompt for whisper. whether the initial prompt should be used in decoding each segment
ASR_CARRY_INITIAL_PROMPT=true
# beam size for ASR
ASR_BEAM_SIZE=5

# youtube config values
# number of retries for yt-dlp when downloading captions
YT_DLP_RETRIES=20
# time to wait in seconds before giving up
YT_DLP_SOCKET_TIMEOUT=30
# captions output directory
CAPTIONS_OUTPUT_DIR="captions"

# AI Config values
# The temperature value to be set for the LLM models
# Set it to zero to ensure reproducibility for a model
TEMPERATURE=0.5

# text llm api key
TEXT_LLM_API_KEY="$DEEPINFRA_API_KEY"
# text llm base url
TEXT_LLM_BASE_URL="https://api.deepinfra.com/v1/openai"
# text llm chat model endpoint
TEXT_LLM_CHAT_ENDPOINT="/chat/completions"
# text llm model used for summarization
TEXT_LLM_MODEL="deepseek-ai/DeepSeek-V3.1"

# The system prompt for summarizing text.
SYSTEM_SUMMARY_PROMPT='{
  "role": "system",
  "content": "You are a helpful assistant that summarizes content. Be concise, helpful."
}
'
# The prompt for summarizing chunks within the podcast transcript.
CHUNK_SUMMARY_PROMPT='{
  "task": "Summarize the provided text.",
  "output_format": "Plain text summary in narrative style",
  "rules": {
    "exclude": [
      "plugs, branding, and promotions",
      "mentions of Day, podcast, and \"Rosary in a Day\"",
      "repetitive prayers such as Our Father, Hail Mary, and Glory Be"
    ],
    "include": [
      "details of any described artwork directly within the summary text",
      "details of any rosary mysteries directly within the summary text",
    ]
  },
  "artwork_integration": "When artworks are described, naturally include their details (title, artist full name, current location, medium, style, date, and a brief description) as part of the flowing summary narrative."
}
'
# The prompt for the final summary of all the chunk summaries
FINAL_SUMMARY_PROMPT='{
  "task": "Summarize the provided text in the style of C.S. Lewis.",
  "output_format": "Markdown-formatted text",
  "format_requirements": {
    "header": "### AI-Generated Summary: {generated_title}",
    "generated_title": "string (title with proper grammar, no colon, concise yet reflective of the text)"
  },
  "style": {
    "voice": "C.S. Lewis",
    "tone": "gentle conviction, moral clarity, rhetorical flair",
    "audience": "intelligent but unassuming reader",
    "avoid": ["modern jargon", "meta-commentary", "footnotes", "explanations"]
  },
  "content_requirements": {
    "summary": "Clear, timeless presentation of ideas from the text",
    "artworks": "Include details of artworks if they are mentioned in the text",
    "rosary_mysteries": "Include details of rosary mysteries if they are mentioned in the text",
    "restrictions": "Do not add explanations if artworks are not detailed"
  }
}
'
# The meta-prompt to generate image prompt and caption from the summary input
SUMMARY_IMAGE_META_PROMPT='{
  "task": "Extract visual meaning from text and generate structured image metadata.",
  "inputs": {
    "description": "{text_input}"
  },
  "output_format": "JSON object with two fields",
  "fields": {
    "image_prompt": "A richly detailed visual description suitable for generating an image. If subject suggests a cartoon or stylized artwork, explicitly describe it as a stylized cartoon illustration or concept art. Ensure correct geometry, perspective, and spatial coherence. When humans or creatures are present, describe posture or actions naturally with clearly visible, anatomically correct faces and hands, each hand having five distinct fingers. Use influences from stylized yet anatomically faithful artists (e.g., Loish, Glen Keane, Studio Ghibli) where appropriate.",
    "caption": "A brief, expressive caption (≤20 words) summarizing or enhancing the image concept. Must not contain colons. Must always be a grammatically complete sentence, not a fragment or single word."
  },
  "rules": {
    "response_format": "Return only valid JSON in the form {\"caption\": \"...\", \"image_prompt\": \"...\"}",
    "forbidden": [
      "colons in caption",
      "caption fragments",
      "single-word captions",
      "meta commentary",
      "extraneous text outside JSON"
    ]
  }
}
'
RIAY_PREAMBLE_PROMPT='{
  "role": "system",
  "content": "You are an expert in Christian art and theology with a deep understanding of the Rosary and its mysteries. You will always encode the mysteries of the Rosary as follows:",
  "mysteries": {
    "Joyful Mysteries": [
      "The Annunciation",
      "The Visitation",
      "The Nativity",
      "The Presentation of Jesus in the Temple",
      "The Finding of Jesus in the Temple"
    ],
    "Sorrowful Mysteries": [
      "The Agony in the Garden",
      "The Scourging at the Pillar",
      "The Crowning with Thorns",
      "The Carrying of the Cross",
      "The Crucifixion"
    ],
    "Glorious Mysteries": [
      "The Resurrection",
      "The Ascension",
      "The Descent of the Holy Spirit",
      "The Assumption of Mary",
      "The Coronation of Mary"
    ],
    "Luminous Mysteries": [
      "The Baptism of Jesus in the Jordan",
      "The Wedding at Cana",
      "The Proclamation of the Kingdom of God",
      "The Transfiguration",
      "The Institution of the Eucharist"
    ]
  }
}
'
SUMMARY_ARTWORK_DETAILS_PROMPT='{
  "task": "Extract Christian artwork and theological details from the provided text.",
  "input": "TEXT_INPUT",
  "output_format": "JSON array of objects",
  "object_structure": {
    "details": {
      "title": "string (artwork title or empty string)",
      "artist": "string (artist name or empty string)",
      "date": "string (date of creation or empty string)",
      "medium": "string (artwork medium or empty string)",
      "style": "string (art style or empty string)",
      "location": "string (current location of artwork or empty string)",
      "subject": "string (main subject or empty string)",
      "mystery_name": "string (the rosary mystery the subject and/or title of the artwork is best suited to)",
      "mystery_type": "string (One of Joyful,Luminous,Sorrowful or Glorious or empty string)"
    },
    "filename": "string (lowercase alphanumeric, max 20 chars, mostly unique, derived from title, artist, and date)"
    "caption": "string (caption in proper English, ≤20 words, must use title, artist, date, location, medium, subject in priority order)"
  },
  "rules": [
    "Each attribute in details must have a value or an empty string.",
    "If title, artist and subject are not filled, do not return an object."
    "If no artwork is described in the text, return an empty JSON array []."
  ]
}'
# Prompt for augmenting artwork details
ART_DETAILS_AUGMENT_PROMPT='{
  "task": "Enhance Christian artwork metadata with additional details.",
  "inputs": {
    "artworks_array": "JSON array of artwork objects to be enriched"
  },
  "augment_fields": {
    "original_title": "string (title in original language, or empty string if not available)",
    "title_language": "string (language of original title, or empty string)",
    "ISO_code": "string (ISO 639-1 language code, or empty string)",
    "caption": "string (20 words exactly, summarizing the artwork clearly and concisely)"
  },
  "rules": {
    "output_format": "Return a well-formatted JSON array with the new fields added for each object. Do not add fields if artworks_array is empty.",
    "response": "Do not include explanations, markdown, or additional commentary",
    "empty_values": "If a field cannot be determined, return an empty string"
  }
}
'

# list of files for generating README and readthedocs documentation
# in the order below
CONTENT_DOCS=(
  "RIAY=start.md"
  "January=January.md"
  "February=February.md"
  "March=March.md"
  "April=April.md"
  "May=May.md"
  "June=June.md"
  "July=July.md"
  "August=August.md"
  "September=September.md"
  "October=October.md"
  "November=November.md"
  "December=December.md"
)

# image generation configuration
# turn on or off image generation
AUTO_GENERATE_IMAGES=false
# relative path to image generation script passed just one parameter --- the prompt ---
# and writing the path of the jpeg image generated to stdout
# you can plug in your own script here if you wish to use a different image generation engine and/or provider
IMAGE_GENERATION_SCRIPT="deepinfragenerateimage"
# deepinfra image generation inference model
DEEPINFRA_IMAGE_GENERATION_MODEL="stabilityai/sd3.5"
# falai image generation inference model
FALAI_IMAGE_GENERATION_MODEL="janus"

# art downloader configuration
AUTO_DOWNLOAD_ART=true
ART_DOWNLOADER_DIR="artdownloads"
MIN_IMAGE_WIDTH=350
MIN_IMAGE_HEIGHT=480
SEARCH_WIKIPEDIA=false
STOCK_PHOTO_SITES=(
  "alamy.com"
  "gettyimages.com"
  "gettyimages.co.uk"
  "istockphoto.com"
  "shutterstock.com"
  "dreamstime.com"
  "123rf.com"
  "depositphotos.com"
  "fineartamerica.com"
  "pixels.com"
  "bigstockphoto.com"
  "fotolia.com"
  "stock.adobe.com"
  "canstockphoto.com"
  "picfair.com"
  "granger.com"
  "bridgemanimages.com"
  "agefotostock.com"
  "europosters.nl"
  "nikkel-art.be"
  "etsy.com"
  "pixers.us"
  "ebayimg.com"
)
SOCIAL_MEDIA_SITES=(
  "reddit.com"
  "redd.it"
  "facebook.com"
  "X.com"
  "twitter.com"
  "tiktok.com"
  "threads.com"
  "snapchat.com"
  "linkedin.com"
  "pinterest.com"
  "quora.com"
  "tumblr.com"
  "4chan.com"
  "8kun.com"
  "imgur.com"
)
# config parameter whether to use art database or not
USE_ART_DATABASE=true

# art verifier settings
# parameter whether to verify art images or use rule-of-thumb where wikimedia images are preferred to images from google and duckduckgo
VERIFY_ART_IMAGES=false
# script that verifies art image
ART_VERIFIER_SCRIPT="matchimagetometadata.py"
# prompt to obtain art metadata
ART_METADATA_PROMPT='{
  "task": "Analyze Christian artwork and generate structured metadata.",
  "inputs": {
    "artwork_details": "{}"
  },
  "output_format": "Flat JSON object (no markdown, no nesting, only top-level attributes).",
  "required_fields": {
    "title": "string (title of the artwork)",
    "artist": "string (artist or artists)",
    "medium": "string (e.g., oil on canvas, fresco, marble sculpture)",
    "location": "string (current location of artwork)",
    "date": "string (creation year and century)",
    "style": "string (artistic style or school)",
    "description": "string (visual elements, composition, subject matter, style)",
    "image_color": "string (Color, Grayscale, Monochrome, Duotone/Tritone, Sepia, Color-tinted grayscale, Black-and-white, etc.)",
    "watermarked": "string (Yes or No)",
    "caption": "string (≤20 words, must use title, artist, date, location, medium, description in priority order)",
    "analyzed": "string (Yes or No — whether analysis was possible)",
    "comments": "string (additional notes, including reasons if analysis was not possible)"
  },
  "rules": {
    "format": "Return only valid JSON, no markdown, no extra text.",
    "empty_values": "If a field cannot be determined, return an empty string.",
    "caption_constraint": "Caption must be ≤20 words, grammatically correct, and descriptive."
  }
}
'
# parameter to decide whether to allow rejected images to be embedded. Takes two values, strict or lenient
IMAGE_CONTENT_VALIDATION="lenient"
# vector embeddings model api key
VECTOR_EMBEDDINGS_MODEL_API_KEY="$DEEPINFRA_API_KEY"
# vector embeddings provider base url
VECTOR_EMBEDDINGS_BASE_URL="https://api.deepinfra.com/v1/openai"
# vector embeddings model used for cosine similarity
# if the model is used only to compare in memory
# you could use different models for production and test
# but if stored in file or database, use same models if files or databases shared
VECTOR_EMBEDDINGS_MODEL="thenlper/gte-large"
# vector embeddings model dimensions
VECTOR_EMBEDDINGS_MODEL_DIMENSIONS=1024
# Whether to look for alternate images using Google Lens
FIND_ALTERNATE_IMAGES=false

# config values for extractimagemetadata.py
# prompt to augment image metadata
AUGMENT_META_DATA_PROMPT='{
  "task": "Enhance artwork metadata in json array with additional art historical and theological details.",
  "inputs": {
    "artworks_array": "{artworks_array}"
  },
  "augment_fields": {
    "title": "string",
    "artist": "string",
    "date": "string",
    "medium": "string",
    "style": "string",
    "location": "string (current location of artwork)",
    "subject": "string",
    "original_title": "string (in original language, if not present add empty string)",
    "original_title_language": "string (language of original title, or empty string)",
    "original_title_ISO_code": "string (ISO 639-1 code of language, or empty string)",
    "description": "string (30-word summary of the artwork)"
  },
  "rosary_classification": {
    "mystery_type": "One of Joyful, Sorrowful, Glorious, Luminous",
    "mystery_name": "Exact name of the matching mystery"
  },
  "output_format": {
    "artrecords": [
      {
        "day_num": "int",
        "image_filepath": "string",
        "image_url": "string",
        "caption": "string",
        "title": "string",
        "artist": "string",
        "date": "string",
        "medium": "string",
        "style": "string",
        "location": "string",
        "subject": "string",
        "original_title": "string",
        "original_title_language": "string",
        "original_title_ISO_code": "string",
        "description": "string",
        "mystery_type": "string",
        "mystery_name": "string"
      }
    ]
  },
  "rules": {
    "empty_values": "Fill with empty string if information not available",
    "response": "Return only JSON array wrapped in a field named artrecords. Do not add explanations."
  }
}
'
# batch_size
AUGMENT_META_DATA_BATCH_SIZE=10

# config values for createartdb.py
# csv file that contains the extracted art records
ART_RECORDS_CSV="artrecords.csv"
# sqlite database name that has the art records
ART_DATABASE="art.db"
# hnsw index name that has the art records embeddings
ART_DATABASE_HNSW_INDEX="art.hnsw"
# hnsw database hnsw space
ART_DATABASE_HNSW_SPACE="cosine"
# hnsw database maximum results
ART_DATABASE_HNSW_MAX_RESULTS=3
# list of columns to embed from artrecords.csv
EMBEDDABLE_COLUMNS="artist,date,location,medium,mystery_name,mystery_type,original_title,style,subject,title,caption,description,image_filepath,image_url"
# identify mysteries of the rosary prompt
ROSARY_PROMPT='{
  "task": "Identify Rosary Mysteries in the given Christian text.",
  "inputs": {
    "christian_text": "{CHRISTIAN_TEXT}"
  },
  "classification": {
    "mystery_type": "One of Joyful, Sorrowful, Glorious, or Luminous",
    "mystery_name": "Exact name of the matching mystery"
  },
  "output_format": [
    {
      "mystery_type": "Sorrowful",
      "mystery_name": "The Crucifixion"
    }
  ],
  "empty_output": "[] (if no mysteries are described)",
  "rules": {
    "response": "Do not provide explanations or extra text — output only JSON."
  }
}
'
# create caption from json record and text input prompt
CREATE_CAPTION_PROMPT='{
  "task": "Generate a descriptive caption for an art image using the information in the inputs provided and your Christian art knowledge.",
  "inputs": {
    "json_object": "{json_object}",
    "text_input": "{text_input}"
  },
  "knowledge": "Combine Christian art knowledge with the provided inputs.",
  "output_format": "Plain text",
  "rules": {
    "caption_length": "20 words or fewer",
    "forbidden": [
      "greetings",
      "questions",
      "offers of help",
      "meta-commentary"
    ],
    "content": "Caption must describe the artwork (title, artist, date, medium, location, subject) in natural English.",
    "response": "Return the caption text only, no greetings, no explanations, no additional text."
  }
}
'
