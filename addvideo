#!/usr/bin/env bash
# Add new videos to the system by:
# 1. Generating markdown content
# 2. Creating overlay images
# 3. Updating index files
# 4. Maintaining video lists

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Exit codes
readonly EXIT_SUCCESS=0
readonly EXIT_INVALID_ARGUMENTS=1
readonly EXIT_INVALID_VIDEO_ID=2
readonly EXIT_INVALID_CAPTION=3
readonly EXIT_VIDEO_NOT_FOUND=4
readonly EXIT_NO_INTERNET=5
readonly EXIT_OVERLAY_FAILED=6
readonly EXIT_FILE_GENERATION_FAILED=7
readonly EXIT_VIDEO_EXISTS=8

######################################################################
# Functions
######################################################################

# Print usage information
# Globals: none
# Arguments: none
# Outputs: usage information to STDOUT
# Returns: exits with status 1
usage() {
  exitcode="${1:-0}"
  cat << EOF
Usage: ${0##*/} [-n|--dry-run] [-d|--debug] [-v|--version] vid caption

Add a new video to the system by generating markdown and updating indexes.

Options:
  -n, --dry-run    Show what would happen without making changes
  -d, --debug      Enable debug output
  -v, --version    Show version information
Arguments:
  vid              YouTube video ID (11 characters)
  caption          Video title/description (max 100 chars)

Exit Codes:
  0  Success
  1  Invalid arguments
  2  Invalid YouTube video ID format
  3  Invalid caption format
  4  Video not found on YouTube
  5  No internet connection
  6  Failed to generate overlay
  7  Failed to generate files
  8  Video already exists in ${VIDEOS_FILE}
EOF
  exit "$exitcode"
}

# Print version information
# Globals: VERSION
# Arguments: none
# Outputs: version string to STDOUT
# Returns: none
version() {
  printf "%s\n" "$VERSION"
}

# Check if video ID already exists
# Globals: VIDEOS_FILE
# Arguments: vid
# Outputs: none
# Returns: 0 if exists, 1 otherwise
check_video_exists() {
  grep -q "^$1$" "$VIDEOS_FILE"
}

# Validate script inputs
# Globals: none
# Arguments: vid caption
# Outputs: error messages to STDERR
# Returns: 0 if valid, non-zero otherwise
validate_inputs() {
  if ! vidmd::validate_vid "$1"; then
    echo "Error: Invalid YouTube video ID format: '$1'" >&2
    echo "       YouTube video IDs should be 11 characters long" >&2
    return $EXIT_INVALID_VIDEO_ID
  fi

  if ! vidmd::validate_caption "$2"; then
    echo "Error: Invalid caption format: '$2'" >&2
    return $EXIT_INVALID_CAPTION
  fi

  if check_video_exists "$1"; then
    echo "Error: Video ID '$1' already exists in $VIDEOS_FILE" >&2
    return $EXIT_VIDEO_EXISTS
  fi

  if ! youtube::check_video_exists "$1"; then
    echo "Error: No video found with ID: '$1'" >&2
    echo "       Please verify the video exists at https://youtu.be/$1" >&2
    return $EXIT_VIDEO_NOT_FOUND
  fi
  return $EXIT_SUCCESS
}

# Generate all required files for new video
# Globals: COMPACT_FILE VIDEOS_FILE YEAR
# Arguments: vid caption doy
# Outputs: status messages to STDOUT/STDERR
# Returns: 0 on success, non-zero on failure
generate_files() {
  local vid="$1"
  local caption="$2"
  local doy="$3"
  local videourl="https://youtu.be/${vid}"
  local month fname formatdt md

  month="$(date::mfromdoy "${doy#0}")"
  # shellcheck disable=SC2153
  monthnumber="$(date::monthnumberfrommonth "${month}" "${YEAR}")"
  fname="${month}/Day$(printf "%03d" "${doy#0}").md"
  summaryfname="${month}/Day$(printf "%03d" "${doy#0}")summary.txt"
  formatdt="$(date::datefromdoy "${doy#0}")"

  md="$(vidmd::genvidthmd "$vid" "$videourl" "$caption" "$doy")"

  if [[ -f "$fname" ]] && ! mv "$fname" "${fname}.bak"; then
    echo "Warning: Failed to backup ${fname}" >&2
  fi

  {
    echo
    echo "## $formatdt"
    echo
    echo "### $caption"
    echo
    echo "$md"
    "${SCRIPT_DIR}/summarizevideo" -- "$vid" >| "$summaryfname"
    cat "$summaryfname"
  } >| "$fname"

  if ! cp "${month}/${COMPACT_FILE}" "${month}/${COMPACT_FILE}.bak"; then
    echo "Warning: Failed to backup compact file" >&2
  fi

  basename -- "$fname" >> "${month}/${COMPACT_FILE}"

  if "${SCRIPT_DIR}/genmonth" "$monthnumber" "$YEAR"; then
    printf "%s\n" "$vid" >> "$VIDEOS_FILE"
    echo "Successfully added video $vid"
    return $EXIT_SUCCESS
  else
    echo "Error: Failed to generate file for month ${month}" >&2
    mv "${month}/${COMPACT_FILE}.bak" "${month}/${COMPACT_FILE}"
    return $EXIT_FILE_GENERATION_FAILED
  fi
}

# Simulate adding a video (dry run)
# Globals: none
# Arguments: vid caption doy
# Outputs: simulation output to STDOUT
# Returns: none
dry_run() {
  local vid="$1"
  local caption="$2"
  local doy="$3"
  local videourl="https://youtu.be/${vid}"
  local month fname formatdt

  month="$(date::mfromdoy "${doy#0}")"
  fname="${month}/Day$(printf "%03d" "${doy#0}").md"
  formatdt="$(date::datefromdoy "${doy#0}")"

  cat << EOF
=== DRY RUN SIMULATION ===
Video Details:
- ID: $vid
- Caption: "$caption"
- Day of Year: $doy
- Month: $month
- Date: $formatdt

Operations that would be performed:
1. Overlay Generation:
   - Command: ${SCRIPT_DIR}/genoverlay "$vid" "$doy"
   - Would create overlay image for day $doy

2. File Creation:
   - Path: $fname
   - Contents:
     ## $formatdt

     ### $caption

     $(vidmd::genvidthmd "$vid" "$videourl" "$caption" "$doy")

3. File Updates:
   - Would append to ${month}/${COMPACT_FILE}
   - Would append to $VIDEOS_FILE

4. Month Regeneration:
   - Command: ${SCRIPT_DIR}/genmonth "$(date::monthnumberfrommonth "${month}" "${YEAR}")" "$YEAR"
   - Would regenerate TOC for $month

=== END DRY RUN ===
EOF
}

# Main function
# Globals: COMPACT_FILE VIDEOS_FILE
# Arguments: command line arguments
# Outputs: various status messages
# Returns: 0 on success, non-zero on failure
main() {
  local dry_run=false
  local debug=false
  local vid caption

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -n | --dry-run)
        dry_run=true
        shift
        ;;
      -d | --debug)
        debug=true
        shift
        ;;
      -v | --version)
        version
        exit $EXIT_SUCCESS
        ;;
      -h | --help)
        usage
        ;;
      *) break ;;
    esac
  done

  $debug && set -x

  if [[ $# -ne 2 ]]; then
    usage $EXIT_INVALID_ARGUMENTS
  fi

  vid="$1"
  caption="$2"

  validate_inputs "$vid" "$caption" || exit $?

  if ! internet::checkinternet; then
    echo "Error: No internet connection available" >&2
    exit $EXIT_NO_INTERNET
  fi

  local doy
  doy=$(("$(wc -l < "$VIDEOS_FILE")" + 1))

  if $dry_run; then
    dry_run "$vid" "$caption" "$doy"
    exit $EXIT_SUCCESS
  fi

  "${SCRIPT_DIR}/genoverlay" "$vid" "$doy" || {
    echo "Error: Failed to generate overlay for video $vid" >&2
    exit $EXIT_OVERLAY_FAILED
  }

  generate_files "$vid" "$caption" "$doy" || exit $?
}

######################################################################
# Main script execution
######################################################################

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # Resolve script directory
  if command -v realpath > /dev/null 2>&1; then
    readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
  else
    readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" && pwd -P)"
  fi

  # Source required libraries
  source "${SCRIPT_DIR}/lib/require.sh"
  source "${SCRIPT_DIR}/lib/internet.sh"
  source "${SCRIPT_DIR}/lib/youtube.sh"
  source "${SCRIPT_DIR}/lib/vidmd.sh"
  source "${SCRIPT_DIR}/lib/lockconfig.sh"
  lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"
  # Check requirements
  require_vars YOUTUBE_API_KEY REPO_OWNER YEAR
  require_commands sed basename date tee mv date wc cat cp

  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
