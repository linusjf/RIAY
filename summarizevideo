#!/usr/bin/env bash
# Summarizes YouTube videos by extracting captions and using AI APIs to generate summaries
# Supports Gemini and DeepSeek APIs with automatic fallback
# Outputs markdown formatted summary

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME=$(basename "$0")

# Source utility libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/require.sh"
source "${SCRIPT_DIR}/util.sh"

readonly GAP_BW_REQS=10
readonly MAX_RETRIES=5
readonly INITIAL_RETRY_DELAY=2

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-0}
  local output=${exit_code:-1}
  if [[ $exit_code -eq 0 ]]; then
    output=1
  else
    output=2
  fi

  >&"$output" cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <youtube-video-id>

Options:
  -c, --caption-only      Extract captions only without summarization
  -d, --debug             Enable debug output
  -p, --prepend-day-index Prepend day index from videos.txt to output files
  --version               Show version information
  --help                  Show this help message

Examples:
  ${SCRIPT_NAME} dQw4w9WgXcQ
  ${SCRIPT_NAME} --caption-only dQw4w9WgXcQ > captions.txt
EOF

  exit "$exit_code"
}

function get_day_index() {
  local video_id="$1"
  local index=0
  while IFS= read -r line; do
    if [[ "$line" == "$video_id" ]]; then
      printf "Day%03d-" "$((index + 1))"
      return 0
    fi
    ((index++))
  done < "${SCRIPT_DIR}/videos.txt"
  return 1
}

function check_dependencies() {
  require_commands jq curl yt-dlp
}

function extract_text_from_vtt() {
  local vtt_file="$1"
  grep -vE '^[0-9]+$|^[0-9]{2}:' "$vtt_file" \
    | sed -e '/^WEBVTT/d' \
      -e '/^Kind/d' \
      -e '/^Language/d' \
      -e 's/\[Music\]//g' \
      -e '/^[[:space:]]*$/d' \
      -e 's/<[^>]*>//g' \
    | tr '\n' ' ' \
    | jq -Rs . | fold -s -w 1000
}

function safe_curl_request() {
  local url="$1"
  local method="${2:-GET}"
  local headers="${3:-}"
  local data="${4:-}"
  local output_file
  output_file=$(mktemp)

  local retry_count=0
  local delay=$INITIAL_RETRY_DELAY
  local status_code=0
  local response=""

  while [[ $retry_count -lt $MAX_RETRIES ]]; do
    status_code=0
    response=""

    local curl_cmd=("curl" "--show-error" "--connect-timeout" "10" "--max-time" "60" "--fail-with-body" "--silent" "--write-out" "%{http_code}" "-o" "$output_file")

    if [[ "$method" == "POST" ]]; then
      curl_cmd+=("-X" "POST")
    fi

    if [[ -n "$headers" ]]; then
      curl_cmd+=("-H" "$headers")
    fi

    if [[ -n "$data" ]]; then
      curl_cmd+=("-d" "$data")
    fi

    curl_cmd+=("$url")

    status_code=$("${curl_cmd[@]}")
    response=$(cat "$output_file")

    if [[ $status_code -ge 200 && $status_code -lt 300 ]]; then
      echo "$response"
      rm -f "$output_file"
      return 0
    fi

    retry_count=$((retry_count + 1))
    if [[ $retry_count -lt $MAX_RETRIES ]]; then
      sleep $delay
      delay=$((delay * 2))
    fi
  done

  rm -f "$output_file"
  err "Request failed after $MAX_RETRIES attempts. Last status code: $status_code"
  return 1
}

function get_video_title() {
  local video_id="$1"
  safe_curl_request "https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${video_id}&key=${YOUTUBE_API_KEY}"
}

function download_captions() {
  local video_id="$1"
  local prefix="$2"
  rm -f "${prefix}${video_id}.*"
  yt-dlp --write-auto-sub --sub-lang "en" --skip-download --sub-format "vtt" \
    -o "${prefix}${video_id}.%(ext)s" "https://www.youtube.com/watch?v=${video_id}" > /dev/null 2>&1
}

function get_chunk_prompt() {
  local chunk="$1"
  local prompt
  prompt=$(cat "${SCRIPT_DIR}/chunkprompt.txt")
  printf "%s\n\n%s\n" "${prompt}" "${chunk}"
}

function get_final_prompt() {
  local input="$1"
  local prompt
  prompt=$(cat "${SCRIPT_DIR}/finalsummaryprompt.txt")
  printf "%s\n\n%s\n" "${prompt}" "${input}"
}

function summarize_chunk_gemini() {
  local chunk="$1"
  local prompt
  prompt=$(get_chunk_prompt "$chunk")
  local payload
  payload="$(
    cat << EOM
{
  "contents": [{
    "parts": [{
      "text": "$prompt"
    }]
  }],
  "generationConfig": {
    "temperature": 0.5
  }
}
EOM
  )"

  local response
  response="$(
    safe_curl_request \
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent?key=${GEMINI_API_KEY}" \
      "POST" \
      "Content-Type: application/json" \
      "$payload"
  )"

  if [[ "$response" == null* ]]; then
    err "Gemini API returned invalid response"
    return 1
  fi

  if ! echo "$response" | jq . > /dev/null 2>&1; then
    err "Gemini API returned invalid response"
    return 1
  fi

  echo "$response" | jq -r '.candidates[0].content.parts[0].text'
}

function summarize_chunk_deepseek() {
  local chunk="$1"
  local prompt
  prompt=$(get_chunk_prompt "$chunk")
  local payload
  payload="$(
    cat << EOM
{
  "model": "deepseek-chat",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant that summarizes YouTube transcripts. Exclude plugs, branding, and service/product promotions. Omit mention of Day, podcast and Rosary in a Day. The listener knows that already."
    },
    {
      "role": "user",
      "content": "$prompt"
    }
  ],
  "temperature": 0.5
}
EOM
  )"

  local response
  response="$(
    safe_curl_request \
      "https://api.deepseek.com/chat/completions" \
      "POST" \
      "Authorization: Bearer ${DEEPSEEK_API_KEY}
Content-Type: application/json" \
      "$payload"
  )"

  if ! echo "$response" | jq . > /dev/null 2>&1; then
    err "DeepSeek API returned invalid response"
    return 1
  fi

  echo "$response" | jq -r '.choices[0].message.content'
}

function summarize_chunk() {
  local chunk="$1"
  if [[ -n "${GEMINI_API_KEY:-}" ]]; then
    local summary
    summary=$(summarize_chunk_gemini "$chunk" 2> /dev/null || true)
    if [[ -n "$summary" ]] && [[ "$summary" == null* ]]; then
      echo "$summary"
      return 0
    fi
  fi

  if [[ -n "${DEEPSEEK_API_KEY:-}" ]]; then
    local summary
    summary=$(summarize_chunk_deepseek "$chunk" 2> /dev/null || true)
    if [[ -n "$summary" ]]; then
      echo "$summary"
      return 0
    fi
  fi

  err "Failed to summarize chunk (no working API available)"
  return 1
}

function final_summary_gemini() {
  local input="$1"
  local prompt
  prompt=$(get_final_prompt "$input")
  local escaped_prompt
  escaped_prompt=$(jq -Rs <<< "$prompt")
  local payload
  payload=$(jq -n \
    --arg prompt "$escaped_prompt" \
    '{
      "contents": [{
        "parts": [{
          "text": $prompt
        }]
      }],
      "generationConfig": {
        "temperature": 0.5
      }
    }')

  local response
  response=$(
    safe_curl_request \
      "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-exp-03-25:generateContent?key=${GEMINI_API_KEY}" \
      "POST" \
      "Content-Type: application/json" \
      "$payload"
  )

  if ! echo "$response" | jq . > /dev/null 2>&1; then
    err "Gemini API returned invalid response"
    return 1
  fi

  echo "$response" | jq -r '.candidates[0].content.parts[0].text'
}

function final_summary_deepseek() {
  local input="$1"
  local prompt
  prompt=$(get_final_prompt "$input")
  local escaped_prompt
  escaped_prompt=$(jq -Rs <<< "$prompt")
  local payload
  payload=$(jq -n \
    --arg prompt "$escaped_prompt" \
    '{
      "model": "deepseek-chat",
      "messages": [
        {
          "role": "system",
          "content": "You are a helpful assistant that summarizes content."
        },
        {
          "role": "user",
          "content": $prompt
        }
      ],
      "temperature": 0.5
    }')

  local response
  response=$(
    safe_curl_request \
      "https://api.deepseek.com/chat/completions" \
      "POST" \
      "Authorization: Bearer ${DEEPSEEK_API_KEY}
Content-Type: application/json" \
      "$payload"
  )

  if ! echo "$response" | jq . > /dev/null 2>&1; then
    err "DeepSeek API returned invalid response"
    return 1
  fi

  echo "$response" | jq -r '.choices[0].message.content'
}

function main() {
  local caption_only=false
  local debug=false
  local prepend_day_index=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --caption-only)
        caption_only=true
        shift
        ;;
      -d | --debug)
        debug=true
        shift
        ;;
      -p | --prepend-day-index)
        prepend_day_index=true
        shift
        ;;
      --version)
        version
        exit 0
        ;;
      --help) usage 0 ;;
      --)
        shift
        break
        ;;
      -*) usage 1 ;;
      *) break ;;
    esac
  done

  if [[ $# -eq 0 ]]; then
    usage 1
  fi

  local VIDEO_ID="$1"
  local FILE_PREFIX=""

  if $prepend_day_index; then
    FILE_PREFIX=$(get_day_index "$VIDEO_ID")
    if [[ -z "$FILE_PREFIX" ]]; then
      die "Error: Video ID $VIDEO_ID not found in videos.txt"
    fi
  fi

  require_vars YOUTUBE_API_KEY
  if [[ -z "${GEMINI_API_KEY:-}" && -z "${DEEPSEEK_API_KEY:-}" ]]; then
    die "Error: At least one of GEMINI_API_KEY or DEEPSEEK_API_KEY environment variables must be set"
  fi

  check_dependencies

  if $debug; then
    echo "Debug: Starting processing for video ID $VIDEO_ID" >&2
  fi

  local VIDEO_TITLE
  VIDEO_TITLE=$(get_video_title "$VIDEO_ID")
  if [[ "$VIDEO_TITLE" == "null" ]]; then
    die "Error: Could not fetch video title"
  fi

  if $debug; then
    echo "Debug: Video title retrieved" >&2
  fi

  download_captions "$VIDEO_ID" "$FILE_PREFIX"
  if [[ ! -f "${FILE_PREFIX}${VIDEO_ID}.en.vtt" ]]; then
    die "Error: Subtitle file not found"
  fi

  if $debug; then
    echo "Debug: Captions downloaded successfully" >&2
  fi

  local TRANSCRIPT
  TRANSCRIPT=$(extract_text_from_vtt "${FILE_PREFIX}${VIDEO_ID}.en.vtt")
  TRANSCRIPT="${TRANSCRIPT:1:-1}"

  if [[ -z "$TRANSCRIPT" ]]; then
    die "Error: Transcript conversion failed"
  fi

  if $debug; then
    echo "Debug: Transcript extracted (length: ${#TRANSCRIPT} chars)" >&2
  fi

  if "$caption_only"; then
    echo "$TRANSCRIPT" > "${FILE_PREFIX}${VIDEO_ID}.en.txt"
    exit 0
  fi

  local CHUNK_SIZE=8000
  local TOTAL_LEN=${#TRANSCRIPT}
  local CHUNKS=()
  for ((i = 0; i < TOTAL_LEN; i += CHUNK_SIZE)); do
    CHUNKS+=("${TRANSCRIPT:i:CHUNK_SIZE}")
  done

  if $debug; then
    echo "Debug: Split transcript into ${#CHUNKS[@]} chunks" >&2
  fi

  local INTERMEDIATE_SUMMARIES=()
  for chunk in "${CHUNKS[@]}"; do
    local summary
    summary=$(summarize_chunk "$chunk")
    INTERMEDIATE_SUMMARIES+=("$summary")
    if $debug; then
      echo "Debug: Processed chunk (length: ${#chunk} chars)" >&2
    fi
    echo "Waiting for ${GAP_BW_REQS}...." >&2
    sleep "$GAP_BW_REQS"
  done

  local FINAL_INPUT
  FINAL_INPUT=$(printf "%s\n\n" "${INTERMEDIATE_SUMMARIES[@]}")
  echo "Waiting for ${GAP_BW_REQS}...." >&2
  sleep "$GAP_BW_REQS"

  local FINAL_SUMMARY=""
  if [[ -n "${GEMINI_API_KEY:-}" ]]; then
    FINAL_SUMMARY=$(final_summary_gemini "$FINAL_INPUT" || true)
  fi

  if [[ (-z "$FINAL_SUMMARY" || -z "${GEMINI_API_KEY:-}") && -n "${DEEPSEEK_API_KEY:-}" ]]; then
    FINAL_SUMMARY=$(final_summary_deepseek "$FINAL_INPUT")
  fi

  if [[ -z "$FINAL_SUMMARY" ]]; then
    die "ERROR: Failed to generate final summary (no working API available)"
  fi

  if $debug; then
    echo "Debug: Final summary generated successfully" >&2
  fi

  echo -e "${FINAL_SUMMARY}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
