#!/usr/bin/env bash

set -euo pipefail
shopt -s inherit_errexit

if [[ -z "${YOUTUBE_API_KEY:-}" ]]; then
  echo "Error: YOUTUBE_API_KEY environment variable not set."
  exit 1
fi

if [[ -z "${GEMINI_API_KEY:-}" && -z "${DEEPSEEK_API_KEY:-}" ]]; then
  echo "Error: At least one of GEMINI_API_KEY or DEEPSEEK_API_KEY environment variables must be set."
  exit 1
fi

caption_only=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -c | --caption-only)
      caption_only=true
      shift
      ;;
    *) break ;;
  esac
done

VIDEO_ID="$1"

if [[ -z "$VIDEO_ID" ]]; then
  echo "Usage: $0 <youtube-video-id>"
  exit 1
fi

extract_text_from_vtt() {
  local vtt_file="$1"
  grep -vE '^[0-9]+$|^[0-9]{2}:' "$vtt_file" \
    | sed -e '/^WEBVTT/d' \
      -e '/^Kind/d' \
      -e '/^Language/d' \
      -e 's/\[Music\]//g' \
      -e '/^[[:space:]]*$/d' \
      -e 's/<[^>]*>//g' \
    | tr '\n' ' ' \
    | jq -Rs . | fold -s -w 1000 # escape double quotes and make file structured
}

# Fetch video title
VIDEO_TITLE=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${VIDEO_ID}&key=${YOUTUBE_API_KEY}" \
  | jq -r '.items[0].snippet.title')

if [[ "$VIDEO_TITLE" == "null" ]]; then
  echo "Error: Could not fetch video title."
  exit 1
fi

# remove any prevuous subtitle and caption files
rm -f "${VIDEO_ID}.*"

# Download auto-subtitles using yt-dlp
yt-dlp --write-auto-sub --sub-lang "en" --skip-download --sub-format "vtt" \
  -o "${VIDEO_ID}.%(ext)s" "https://www.youtube.com/watch?v=${VIDEO_ID}" > /dev/null 2>&1

if [[ ! -f "${VIDEO_ID}.en.vtt" ]]; then
  echo "Error: Subtitle file not found."
  exit 1
fi

# Convert VTT to plain text
TRANSCRIPT=$(extract_text_from_vtt "${VIDEO_ID}.en.vtt")
# remove start and end quotes inserted by jq
TRANSCRIPT="${TRANSCRIPT:1:-1}"

if [[ -z "$TRANSCRIPT" ]]; then
  echo "Error: Transcript conversion failed."
  exit 1
fi

if "$caption_only"; then
  echo "$TRANSCRIPT" > "${VIDEO_ID}.en.txt"
  exit 0
fi

# Chunk transcript into 8000-character parts
CHUNK_SIZE=8000
TOTAL_LEN=${#TRANSCRIPT}
CHUNKS=()
for ((i = 0; i < TOTAL_LEN; i += CHUNK_SIZE)); do
  CHUNKS+=("${TRANSCRIPT:i:CHUNK_SIZE}")
done

# Function to summarize a single chunk using Gemini
summarize_chunk_gemini() {
  local chunk="$1"
  local payload=''
  payload="$(
    cat << EOM
{
  "contents": [{
    "parts": [{
      "text": "Summarize this podcast transcript, excluding plugs, branding, and promotions. Omit mention of Day, podcast and Rosary in a Day. The listener knows that already:\n\n${chunk}"
    }]
  }],
  "generationConfig": {
    "temperature": 0.5
  }
}
EOM
  )"
  local response="$(
    curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${GEMINI_API_KEY}" \
      -H "Content-Type: application/json" \
      -d "$payload"
  )"
  if ! echo "$response" | jq . > /dev/null 2>&1; then
    echo "ERROR: Gemini API returned invalid response:"
    echo "$response"
    return 1
  fi
  echo "$response" | jq -r '.candidates[0].content.parts[0].text'
}

# Function to summarize a single chunk using DeepSeek
summarize_chunk_deepseek() {
  local chunk="$1"
  local payload=''
  payload="$(
    cat << EOM
{
  "model": "deepseek-chat",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant that summarizes YouTube transcripts. Exclude plugs, branding, and service/product promotions. Omit mention of Day, podcast and Rosary in a Day. The listener knows that already."
    },
    {
      "role": "user",
      "content": "Summarize this podcast transcript:\n\n${chunk}"
    }
  ],
  "temperature": 0.5
}
EOM
  )"
  local response="$(
    curl -s https://api.deepseek.com/chat/completions \
      -H "Authorization: Bearer ${DEEPSEEK_API_KEY}" \
      -H "Content-Type: application/json" \
      -d "$payload"
  )"
  if ! echo "$response" | jq . > /dev/null 2>&1; then
    echo "ERROR: DeepSeek API returned invalid response:"
    echo "$response"
    return 1
  fi
  echo "$response" | jq -r '.choices[0].message.content'
}

# Function to try Gemini first, then fall back to DeepSeek
summarize_chunk() {
  local chunk="$1"
  if [[ -n "${GEMINI_API_KEY:-}" ]]; then
    local summary=$(summarize_chunk_gemini "$chunk" 2> /dev/null || true)
    if [[ -n "$summary" ]]; then
      echo "$summary"
      return 0
    fi
  fi

  if [[ -n "${DEEPSEEK_API_KEY:-}" ]]; then
    local summary=$(summarize_chunk_deepseek "$chunk" 2> /dev/null || true)
    if [[ -n "$summary" ]]; then
      echo "$summary"
      return 0
    fi
  fi

  echo "ERROR: Failed to summarize chunk (no working API available)"
  return 1
}

# Process each chunk
INTERMEDIATE_SUMMARIES=()
for chunk in "${CHUNKS[@]}"; do
  summary=$(summarize_chunk "$chunk")
  INTERMEDIATE_SUMMARIES+=("$summary")
  sleep 15s
done

# Final summarization step
FINAL_INPUT=$(printf "%s\n\n" "${INTERMEDIATE_SUMMARIES[@]}")

# Function for final summarization using Gemini
final_summary_gemini() {
  local input="$1"
  local escaped_input=$(jq -Rs <<< "$input")
  local payload=$(jq -n \
    --arg input "$escaped_input" \
    '{
      "contents": [{
        "parts": [{
          "text": ("Condense the following. Highlight the main topics discussed, key takeaways, and any notable quotes or insights. Keep it concise and clear, suitable for someone who wants a quick overview. Start with a level three header and annotate it as '\''AI-Generated Summary:'\'' followed by your generated title. Use no less than 500 words.\n\n" + $input)
        }]
      }],
      "generationConfig": {
        "temperature": 0.5
      }
    }')
  local response=$(
    curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${GEMINI_API_KEY}" \
      -H "Content-Type: application/json" \
      -d "$payload"
  )
  if ! echo "$response" | jq . > /dev/null 2>&1; then
    echo "ERROR: Gemini API returned invalid response:"
    echo "$response"
    return 1
  fi
  echo "$response" | jq -r '.candidates[0].content.parts[0].text'
}

# Function for final summarization using DeepSeek
final_summary_deepseek() {
  local input="$1"
  local escaped_input=$(jq -Rs <<< "$input")
  local payload=$(jq -n \
    --arg input "$escaped_input" \
    '{
      "model": "deepseek-chat",
      "messages": [
        {
          "role": "system",
          "content": ""Condense the following. Highlight the main topics discussed, key takeaways, and any notable quotes or insights. Keep it concise and clear, suitable for someone who wants a quick overview. Start with a level three header and annotate it as '\''AI-Generated Summary:'\'' followed by your generated title. Use no less than 500 words."
        },
        {
          "role": "user",
          "content": $input
        }
      ],
      "temperature": 0.5
    }')
  local response=$(
    curl -s https://api.deepseek.com/chat/completions \
      -H "Authorization: Bearer ${DEEPSEEK_API_KEY}" \
      -H "Content-Type: application/json" \
      -d "$payload"
  )
  if ! echo "$response" | jq . > /dev/null 2>&1; then
    echo "ERROR: DeepSeek API returned invalid response:"
    echo "$response"
    return 1
  fi
  echo "$response" | jq -r '.choices[0].message.content'
}

# Try Gemini first, then DeepSeek for final summary
if [[ -n "${GEMINI_API_KEY:-}" ]]; then
  FINAL_SUMMARY=$(final_summary_gemini "$FINAL_INPUT" || true)
fi

if [[ (-z "$FINAL_SUMMARY" || -z "${GEMINI_API_KEY:-}") && -n "${DEEPSEEK_API_KEY:-}" ]]; then
  FINAL_SUMMARY=$(final_summary_deepseek "$FINAL_INPUT")
fi

if [[ -z "$FINAL_SUMMARY" ]]; then
  echo "ERROR: Failed to generate final summary (no working API available)"
  exit 1
fi

# Output Markdown
echo -e "${FINAL_SUMMARY}"
