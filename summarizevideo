#!/usr/bin/env bash
# Summarizes YouTube videos by extracting captions and using AI APIs to generate summaries
# Supports Gemini and DeepSeek APIs with automatic fallback
# Outputs markdown formatted summary

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/require.sh"
source "${SCRIPT_DIR}/util.sh"
source "${SCRIPT_DIR}/curl.sh"
source "${SCRIPT_DIR}/youtube.sh"
source "${SCRIPT_DIR}/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

declare -i CURRENT_MODEL_INDEX=0

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-0}
  local output=${exit_code:-1}
  if [[ $exit_code -eq 0 ]]; then
    output=1
  else
    output=2
  fi

  >&"$output" cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] <youtube-video-id>

Options:
  -c, --caption-only      Extract captions only without summarization
  -d, --debug             Enable debug output
  --verbose               Enable verbose output
  -p, --prepend-day-index Prepend day index from "${VIDEOS_FILE}" to output files
  --version               Show version information
  --help                  Show this help message

Examples:
  ${SCRIPT_NAME} dQw4w9WgXcQ
  ${SCRIPT_NAME} --caption-only dQw4w9WgXcQ > captions.txt
EOF

  exit "$exit_code"
}

function get_day_index() {
  local video_id="$1"
  local index=0
  while IFS= read -r line; do
    if [[ "$line" == "$video_id" ]]; then
      printf "Day%03d-" "$((index + 1))"
      return 0
    fi
    ((index++))
  done < "${SCRIPT_DIR}/${VIDEOS_FILE}"
  return 1
}

function check_dependencies() {
  require_commands jq curl yt-dlp tee
}

function get_chunk_prompt() {
  local chunk="$1"
  printf "%s\n\n%s\n" "${CHUNK_SUMMARY_PROMPT}" "${chunk}"
}

function get_final_prompt() {
  local input="$1"
  printf "%s\n\n%s\n" "${FINAL_SUMMARY_PROMPT}" "${input}"
}

function summarize_chunk_gemini() {
  local chunk="$1"
  local prompt
  prompt=$(get_chunk_prompt "$chunk")
  local escaped_prompt
  escaped_prompt=$(jq -Rs <<< "$prompt")
  local payload
  payload="$(jq -n --arg content "$escaped_prompt" --argjson temperature "${TEMPERATURE}" '{
  "contents": [{
    "parts": [{
      "text": $content
    }]
  }],
  "generationConfig": {
    "temperature": $temperature
  }
}')"

  local response
  while [[ $CURRENT_MODEL_INDEX -lt "${#GEMINI_MODELS[@]}" ]]; do
    model="${GEMINI_MODELS["$CURRENT_MODEL_INDEX"]}"

    response="$(
      curl::safe_curl_request \
        "https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${GEMINI_API_KEY}" \
        "POST" \
        "Content-Type: application/json" \
        "$payload"
    )"

    local res=$?
    if [[ "$res" -eq 2 ]]; then
      CURRENT_MODEL_INDEX=$((CURRENT_MODEL_INDEX + 1))
      if $verbose && [[ $CURRENT_MODEL_INDEX -lt "${#GEMINI_MODELS[@]}" ]]; then
        >&2 echo "Moving to model ${GEMINI_MODELS[$CURRENT_MODEL_INDEX]}"
      fi
      continue
    else
      if [[ "$response" == null* ]]; then
        err "Gemini API returned invalid response"
        return 1
      fi

      if ! echo "$response" | jq . > /dev/null 2>&1; then
        err "Gemini API returned invalid response"
        return 1
      fi

      SUMMARIZED_CHUNK="$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')"
      return
    fi
  done
  [[ -n "${SUMMARIZED_CHUNK:-}" ]]
}

function summarize_chunk_deepseek() {
  local chunk="$1"
  local prompt
  prompt="$(get_chunk_prompt "$chunk")"
  local escaped_prompt
  escaped_prompt="$(jq -Rs <<< "$prompt")"
  local payload
  payload="$(jq -n --arg content "$escaped_prompt" --argjson temperature "$TEMPERATURE" \
    '{
  "model": "deepseek-chat",
  "messages": [
    {
      "role": "system",
      "content": "You are a helpful assistant that summarizes content. Be concise, helpful."
    },
    {
      "role": "user",
      "content": $content
    }
  ],
  "temperature": $temperature
}')"

  local response
  response="$(
    curl::safe_curl_request \
      "https://api.deepseek.com/chat/completions" \
      "POST" \
      "Authorization: Bearer ${DEEPSEEK_API_KEY}
Content-Type: application/json" \
      "$payload"
  )"

  if ! echo "$response" | jq . > /dev/null 2>&1; then
    err "DeepSeek API returned invalid response"
    return 1
  fi

  SUMMARIZED_CHUNK="$(echo "$response" | jq -r '.choices[0].message.content')"
}

function summarize_chunk() {
  local chunk="$1"
  if [[ "$CURRENT_MODEL_INDEX" -lt "${#GEMINI_MODELS[@]}" ]]; then
    if [[ -n "${GEMINI_API_KEY:-}" ]]; then
      if summarize_chunk_gemini "$chunk"; then
        return 0
      fi
    fi
  fi

  if $verbose; then
    >&2 echo "Trying Deep Seek Chat..."
  fi
  if [[ -n "${DEEPSEEK_API_KEY:-}" ]]; then
    if summarize_chunk_deepseek "$chunk"; then
      return 0
    fi
  fi

  err "Failed to summarize chunk (no working APIs available)"
  return 1
}

function final_summary_gemini() {
  local input="$1"
  local prompt
  prompt=$(get_final_prompt "$input")
  local escaped_prompt
  escaped_prompt=$(jq -Rs <<< "$prompt")
  local payload
  payload=$(jq -n \
    --arg content "$escaped_prompt" \
    --argjson temperature "$TEMPERATURE" \
    '{
      "contents": [{
        "parts": [{
          "text": $content
        }]
      }],
      "generationConfig": {
        "temperature": $temperature
      }
    }')

  local response

  while [[ $CURRENT_MODEL_INDEX -lt "${#GEMINI_MODELS[@]}" ]]; do
    model="${GEMINI_MODELS["$CURRENT_MODEL_INDEX"]}"
    response=$(
      curl::safe_curl_request \
        "https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${GEMINI_API_KEY}" \
        "POST" \
        "Content-Type: application/json" \
        "$payload"
    )

    local res=$?

    if [[ "$res" -eq 2 ]]; then
      CURRENT_MODEL_INDEX=$((CURRENT_MODEL_INDEX + 1))
      if $verbose && [[ $CURRENT_MODEL_INDEX -lt "${#GEMINI_MODELS[@]}" ]]; then
        >&2 echo "Moving to model ${GEMINI_MODELS[$CURRENT_MODEL_INDEX]}"
      fi
      continue
    else
      if ! echo "$response" | jq . > /dev/null 2>&1; then
        err "Gemini API returned invalid response"
        return 1
      fi

      FINAL_SUMMARY="$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')"
      return
    fi
  done
}

function final_summary_deepseek() {
  local input="$1"
  local prompt
  prompt=$(get_final_prompt "$input")
  local escaped_prompt
  escaped_prompt=$(jq -Rs <<< "$prompt")
  local payload
  payload=$(jq -n \
    --arg content "$escaped_prompt" \
    --argjson temperature "$TEMPERATURE" \
    '{
      "model": "deepseek-chat",
      "messages": [
        {
          "role": "system",
          "content": "You are a helpful assistant that summarizes content."
        },
        {
          "role": "user",
          "content": $content
        }
      ],
      "temperature": $temperature
    }')

  local response
  response=$(
    curl::safe_curl_request \
      "https://api.deepseek.com/chat/completions" \
      "POST" \
      "Authorization: Bearer ${DEEPSEEK_API_KEY}
Content-Type: application/json" \
      "$payload"
  )

  if ! echo "$response" | jq . > /dev/null 2>&1; then
    err "DeepSeek API returned invalid response"
    return 1
  fi

  FINAL_SUMMARY="$(echo "$response" | jq -r '.choices[0].message.content')"
}

function main() {
  local caption_only=false
  local verbose=false
  local prepend_day_index=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c | --caption-only)
        caption_only=true
        shift
        ;;
      -d | --debug)
        set -x
        shift
        ;;
      -p | --prepend-day-index)
        prepend_day_index=true
        shift
        ;;
      --version)
        version
        exit 0
        ;;
      --verbose)
        verbose=true
        shift
        ;;
      --help) usage 0 ;;
      --)
        shift
        break
        ;;
      -*) usage 1 ;;
      *) break ;;
    esac
  done

  if [[ $# -eq 0 ]]; then
    usage 1
  fi

  local VIDEO_ID="$1"
  local FILE_PREFIX=""

  if $prepend_day_index; then
    FILE_PREFIX="$(get_day_index "$VIDEO_ID" || true)"
    if [[ -z "$FILE_PREFIX" ]]; then
      die "Error: Video ID $VIDEO_ID not found in ${VIDEOS_FILE}"
    fi
  fi

  require_vars YOUTUBE_API_KEY
  if [[ -z "${GEMINI_API_KEY:-}" && -z "${DEEPSEEK_API_KEY:-}" ]]; then
    die "Error: At least one of GEMINI_API_KEY or DEEPSEEK_API_KEY environment variables must be set"
  fi

  check_dependencies

  if $verbose; then
    >&2 echo "Starting processing for video ID $VIDEO_ID"
  fi

  local VIDEO_TITLE
  VIDEO_TITLE="$(youtube::get_video_title "$VIDEO_ID" || return 1)"
  if [[ "$VIDEO_TITLE" == null ]]; then
    die "Error: Could not fetch video title"
  fi

  if $verbose; then
    >&2 echo "Video title retrieved"
  fi

  youtube::download_captions "$VIDEO_ID" "$FILE_PREFIX"
  if [[ ! -f "${FILE_PREFIX}${VIDEO_ID}.en.vtt" ]]; then
    die "Error: Subtitle file not found"
  fi

  if $verbose; then
    >&2 echo "Captions downloaded successfully"
  fi

  local TRANSCRIPT
  TRANSCRIPT=$(youtube::extract_text_from_vtt "${FILE_PREFIX}${VIDEO_ID}.en.vtt")

  if [[ -z "$TRANSCRIPT" ]]; then
    die "Error: Transcript conversion failed"
  fi

  if $verbose; then
    >&2 echo "Transcript extracted (length: ${#TRANSCRIPT} chars)"
  fi

  if "$caption_only"; then
    echo "$TRANSCRIPT" > "${FILE_PREFIX}${VIDEO_ID}.en.txt"
    exit 0
  fi

  local CHUNK_SIZE=8000
  local TOTAL_LEN=${#TRANSCRIPT}
  local CHUNKS=()
  for ((i = 0; i < TOTAL_LEN; i += CHUNK_SIZE)); do
    CHUNKS+=("${TRANSCRIPT:i:CHUNK_SIZE}")
  done

  if $verbose; then
    >&2 echo "Split transcript into ${#CHUNKS[@]} chunks"
  fi

  if $verbose && [[ "${#GEMINI_MODELS[@]}" -gt 0 ]]; then
    >&2 echo "Starting with model ${GEMINI_MODELS[$CURRENT_MODEL_INDEX]}"
  fi
  local INTERMEDIATE_SUMMARIES=()
  for chunk in "${CHUNKS[@]}"; do
    local SUMMARIZED_CHUNK
    summarize_chunk "$chunk"
    INTERMEDIATE_SUMMARIES+=("${SUMMARIZED_CHUNK}")
    SUMMARIZED_CHUNK=""
    if $verbose; then
      >&2 echo "Processed chunk (length: ${#chunk} chars)"
      >&2 echo "Waiting for ${GAP_BW_REQS} seconds before initiating next request...."
    fi
    sleep "$GAP_BW_REQS"
  done

  local FINAL_INPUT
  FINAL_INPUT=$(printf "%s\n\n" "${INTERMEDIATE_SUMMARIES[@]}")

  local FINAL_SUMMARY=""
  if [[ -n "${GEMINI_API_KEY:-}" ]]; then
    final_summary_gemini "$FINAL_INPUT"
  fi

  if [[ (-z "$FINAL_SUMMARY" || -z "${GEMINI_API_KEY:-}") && -n "${DEEPSEEK_API_KEY:-}" ]]; then
    final_summary_deepseek "$FINAL_INPUT"
  fi

  if [[ -z "$FINAL_SUMMARY" ]]; then
    die "ERROR: Failed to generate final summary (no working API available)"
  fi

  if $verbose; then
    >&2 echo "Final summary generated successfully"
  fi

  echo -e "${FINAL_SUMMARY}"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
