#!/usr/bin/env bash
# Compact multiple markdown files into a single output
# Reads a list of files from compact file usually compact.txt in the specified directory
# and merges them using m4 preprocessing and awk filtering

set -euo pipefail
shopt -s inherit_errexit
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"
readonly VERSION="1.0.0"

# Error codes
readonly ERR_INVALID_DIR=1
readonly ERR_M4_PROCESSING=2
readonly ERR_AWK_FILTERING=3
readonly ERR_MISSING_REQUIREMENTS=4
readonly ERR_TEMP_FILE=5

# Check requirements
require_commands m4 mktemp awk rm date tee cat || exit ${ERR_MISSING_REQUIREMENTS}

# Display usage information
usage() {
  exitcode="${1:-0}"
  cat << EOF
Usage: ${0##*/} [-d|--debug] [dir]
Compact multiple markdown files into a single output

Options:
  -d, --debug      Enable debug output
Arguments:
  dir              Directory containing compact file and files to merge (default: current dir)

Exit codes:
  0                Success
  ${ERR_INVALID_DIR}          Invalid directory or missing compact file
  ${ERR_M4_PROCESSING}        Failed to process files with m4
  ${ERR_AWK_FILTERING}        Failed to filter output with awk
  ${ERR_MISSING_REQUIREMENTS} Missing required commands
  ${ERR_TEMP_FILE}            Failed to create temporary file

The program will:
1. Look for ${COMPACT_FILE} in the specified directory
2. Read the list of files from ${COMPACT_FILE}
3. Merge them using m4 preprocessing
4. Filter empty lines with awk
5. Output the merged content to stdout
EOF
  exit "$exitcode"
}

# Print version information
# Globals: VERSION
# Arguments: none
# Outputs: version string to STDOUT
# Returns: none
version() {
  printf "%s\n" "$VERSION"
}

# Check if directory contains a valid compact file
is_valid_dir() {
  [[ -d "$1" && -e "${1}/${COMPACT_FILE}" ]]
}

main() {
  local this_dir="$(pwd)"
  local target_dir="${1:-${this_dir}}"
  local temp_file tmp_output

  if ! is_valid_dir "${target_dir}"; then
    echo "Error: Invalid directory or missing ${COMPACT_FILE}" >&2
    exit ${ERR_INVALID_DIR}
  fi

  (
    cd "${target_dir}" || exit ${ERR_INVALID_DIR}

    temp_file="$(mktemp -t compact.XXXXXX)" || {
      echo "Error: Failed to create temporary file" >&2
      exit ${ERR_TEMP_FILE}
    }
    echo "changequote(\`{{', \`}}')" > "${temp_file}"

    # Read files list and generate m4 includes
    local files=()
    readarray -t files < "${COMPACT_FILE}"
    for fname in "${files[@]}"; do
      if [[ -e "${fname}" ]]; then
        echo "include({{${fname}}})" >> "${temp_file}"
      fi
    done

    # Process files through m4 and awk
    tmp_output="$(mktemp -t compact.XXXXXX)" || {
      echo "Error: Failed to create temporary file" >&2
      exit ${ERR_TEMP_FILE}
    }
    if ! m4 "${temp_file}" > "${tmp_output}"; then
      echo "Error: Failed to process files with m4" >&2
      exit ${ERR_M4_PROCESSING}
    fi

    if ! awk 'NF {p=1} p' <<< "$(< "${tmp_output}")"; then
      echo "Error: Failed to filter output with awk" >&2
      exit ${ERR_AWK_FILTERING}
    fi

    # Clean up temp files
    rm -f "${tmp_output}" "${temp_file}" &> /dev/null
  )
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --debug)
      set -x
      shift
      ;;
    -h | --help)
      usage 0
      ;;
    --version)
      version
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
