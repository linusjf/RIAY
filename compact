#!/usr/bin/env bash
# Compact multiple markdown files into a single output
# Reads a list of files from compact file usually compact.txt in the specified directory
# and merges them using m4 preprocessing and awk filtering

set -euo pipefail
shopt -s inherit_errexit
# shellcheck disable=SC2155
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

# Display usage information
usage() {
  exitcode="${1:-0}"
  cat << EOF
Usage: ${0##*/} [-d|--debug] [dir]
Compact multiple markdown files into a single output

Options:
  -d, --debug      Enable debug output
Arguments:
  dir              Directory containing compact file and files to merge (default: current dir)

The program will:
1. Look for ${COMPACT_FILE} in the specified directory
2. Read the list of files from ${COMPACT_FILE}
3. Merge them using m4 preprocessing
4. Filter empty lines with awk
5. Output the merged content to stdout
EOF
  exit "$exitcode"
}

# Check if directory contains a valid compact file
is_valid_dir() {
  [[ -d "$1" && -e "${1}/${COMPACT_FILE}" ]]
}

main() {
  # shellcheck disable=SC2155
  local this_dir="$(pwd)"
  local target_dir="${1:-${this_dir}}"
  local temp_file tmp_output

  if ! is_valid_dir "${target_dir}"; then
    usage 1
  fi

  (
    cd "${target_dir}" || exit 1

    temp_file="$(mktemp -t compact.XXXXXX)"
    echo "changequote(\`{{', \`}}')" > "${temp_file}"

    # Read files list and generate m4 includes
    local files=()
    readarray -t files < "${COMPACT_FILE}"
    for fname in "${files[@]}"; do
      if [[ -e "${fname}" ]]; then
        echo "include({{${fname}}})" >> "${temp_file}"
      fi
    done

    # Process files through m4 and awk
    tmp_output="$(mktemp -t compact.XXXXXX)"
    if ! m4 "${temp_file}" > "${tmp_output}"; then
      echo "Error: Failed to process files with m4" >&2
      exit 1
    fi

    if ! awk 'NF {p=1} p' <<< "$(< "${tmp_output}")"; then
      echo "Error: Failed to filter output with awk" >&2
      exit 1
    fi

    # Clean up temp files
    rm -f "${tmp_output}" "${temp_file}" &> /dev/null
  )
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --debug)
      set -x
      shift
      ;;
    -h | --help)
      usage 0
      ;;
    *)
      break
      ;;
  esac
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # Check requirements
  source "${SCRIPT_DIR}/require.sh"
  require_commands m4 mktemp awk rm
  main "$@"
fi
