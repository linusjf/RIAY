#!/usr/bin/env bash
# shellcheck disable=SC2155,SC1090,SC1091
######################################################################
# Script to process markdown files and replace video markdown syntax
#
# Scans Day*.md files in specified directory and updates video markdown
# syntax using vidmd.sh functions.
######################################################################

set -euo pipefail
shopt -s inherit_errexit

readonly SUCCESS=0
readonly FAILURE=1

######################################################################
# Load required library
######################################################################
script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
source "${script_dir}/vidmd.sh" || {
  echo "Error: Failed to source vidmd.sh from ${script_dir}" >&2
  exit "${FAILURE}"
}

######################################################################
# Display usage information
######################################################################
usage() {
  cat << EOF
Usage: ${0##*/} [OPTIONS] dir

Options:
  -d, --debug    Enable debug output (set -x)
  -h, --help     Show this help message and exit

Arguments:
  dir - Directory containing Day*.md files to process
EOF
  exit "${SUCCESS}"
}

######################################################################
# Verify required commands are available
# Globals:
#   None
# Arguments:
#   Commands to check
# Outputs:
#   Error message to STDERR if command missing
# Returns:
#   0 if all commands available, 127 otherwise
######################################################################
require() {
  for cmd in "$@"; do
    if ! command -v "${cmd}" > /dev/null 2>&1; then
      echo "Error: Required command '${cmd}' not found" >&2
      return 127
    fi
  done
}

######################################################################
# Validate directory exists
# Globals:
#   None
# Arguments:
#   Directory path
# Returns:
#   0 if valid directory, 1 otherwise
######################################################################
is_valid_dir() {
  [[ -d "$1" ]]
}

######################################################################
# Main processing function
# Globals:
#   None
# Arguments:
#   Directory to process
# Outputs:
#   Progress messages to STDOUT
#   Error messages to STDERR
# Returns:
#   0 on success, non-zero on failure
######################################################################
main() {
  local debug_mode=0

  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --debug)
        debug_mode=1
        shift
        ;;
      -h | --help)
        usage
        ;;
      -*)
        echo "Error: Invalid option '$1'" >&2
        usage
        ;;
      *)
        break
        ;;
    esac
  done

  # Enable debug if requested
  if ((debug_mode)); then
    set -x
  fi

  # Validate arguments
  if [[ $# -eq 0 ]]; then
    echo "Error: Directory argument required" >&2
    usage
  fi

  local dir="$1"
  require mv mktemp curl

  if ! is_valid_dir "${dir}"; then
    echo "Error: Invalid directory: ${dir}" >&2
    exit "${FAILURE}"
  fi

  # Regular expressions for parsing
  local regex='^\[\!\[([A-Za-z0-9\? -]+)\]'
  regex+='\((https\://.+)\)\]\('
  regex+='(https\://youtu\.be/|'
  regex+='https\://www\.youtube\.com/watch\?v=)([A-Za-z0-9_\-]+)'
  regex+=' +'
  regex+='"(.+)"'
  regex+=' *\)$'

  local regex_doy='^\./Day([0-9]+)\.md$'

  (
    cd "${dir}" || exit "${FAILURE}"
    shopt -s nullglob

    for fname in ./Day*.md; do
      echo "Processing ${fname} ..."
      local doy=""
      if [[ ${fname} =~ ${regex_doy} ]]; then
        doy="${BASH_REMATCH[1]}"
      fi

      local tmp
      tmp="$(mktemp)" || {
        echo "Error: Failed to create temp file" >&2
        exit "${FAILURE}"
      }

      declare -i count=0
      local matched=true

      while IFS= read -r line; do
        if [[ ${line} =~ ${regex} ]]; then
          local caption="${BASH_REMATCH[1]}"
          local vid="${BASH_REMATCH[4]}"
          local vidurl="${BASH_REMATCH[3]}${vid}"

          if [[ ${caption} != "${BASH_REMATCH[5]}" ]]; then
            echo "Error: Mismatch in captions in file ${fname}" >&2
            matched=false
          fi

          ((count += 1))
          if md="$(vidmdloc "${vid}" "${vidurl}" "${caption}" "${doy}")"; then
            echo "${md}" >> "${tmp}"
          else
            echo "${line}" >> "${tmp}"
          fi
        else
          echo "${line}" >> "${tmp}"
        fi
      done <<< "$(< "${fname}")"

      if ${matched}; then
        mv "${tmp}" "${fname}"
      fi

      if ((count == 0)); then
        echo "${fname} does not have video markup"
      fi
    done

    shopt -u nullglob
  )
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
