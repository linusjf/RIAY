#!/usr/bin/env bash
#
# Generate image from prompt using deepinfra API
#
# Usage: deepinfragenerateimage "prompt"
#        or
#        cat "promptfile" | deepinfragenerateimage
# Output: Creates jpg image in temp directory and outputs its path to stdout

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

### Functions ###

function version() {
  # Print script version
  # Globals: VERSION
  # Output: Version number to STDOUT
  # Returns: 0
  printf "%s\n" "$VERSION"
}

function usage() {
  # Print usage information
  # Globals: SCRIPT_NAME
  # Output: Usage message to STDOUT
  # Returns: 0
  cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS] "prompt"

Options:
  -h, --help      Show this help message
  -v, --version   Show version information
  --verbose       Enable verbose output
  --              End of options (treat remaining arguments as prompt)

Arguments:
  prompt       prompt text (or read from stdin if not provided)

Example:
  ${SCRIPT_NAME} "prompt"
  or
  cat Day001ImagePrompt.json | jq -r ".image_prompt" | ${SCRIPT_NAME}
EOF
}

function generate_temp_image() {
  # Generate temporary PNG image from prompt
  # Globals: None
  # Arguments: prompt (string), output_file (string)
  # Returns: 0 on success, non-zero on error
  local prompt="$1"
  local output_file="$2"

  deepctl infer -m "${DEEPINFRA_IMAGE_GENERATION_MODEL}" -i "prompt=${prompt}" \
    | sed 's/data:image\/png;base64,//' \
    | jq -r '.images[0]' \
    | base64 --decode > "$output_file"
}

function convert_to_jpg() {
  # Convert PNG to JPG
  # Globals: None
  # Arguments: png_file (string), jpg_file (string)
  # Returns: 0 on success, non-zero on error
  local png_file="$1"
  local jpg_file="$2"

  gm convert "$png_file" "$jpg_file"
}

function cleanup() {
  # Clean up temporary files
  # Globals: None
  # Arguments: files_to_remove (array)
  # Returns: 0
  local files=("$@")

  for file in "${files[@]}"; do
    if [[ -f "$file" ]]; then
      rm -f "$file"
    fi
  done
}

function read_input() {
  local input="$1"
  if [[ -n "$input" ]]; then
    echo "$input"
  elif [[ ! -t 0 ]]; then
    # Not interactive; input is piped
    cat
  else
    # Interactive shell; prompt user for input
    read -rp "Enter prompt: " prompt
    echo "$prompt"
  fi
}

function main() {
  # Main execution function
  # Globals: SCRIPT_DIR
  # Arguments: input_file (string) or empty for stdin
  # Returns: 0 on success, non-zero on error
  local input="${1:-}"
  local pngfile jpgfile prompt
  local start_time=$(date +%s.%N)

  # Initialize variables
  pngfile="$(mktemp --quiet -t tempXXX.png)"
  prompt="$(read_input "$input")"

  # Show feedback that prompt was received
  if [[ "${VERBOSE:-false}" == "true" ]]; then
    printf "Received prompt: %s\n" "$prompt"
  else
    printf "Processing prompt...\n"
  fi

  # Generate and process images
  generate_temp_image "$prompt" "$pngfile"
  jpgfile="${pngfile%.*}.jpg"
  convert_to_jpg "$pngfile" "$jpgfile"
  echo "$jpgfile"

  # Clean up
  cleanup "$pngfile"

  # Calculate and output execution time
  local end_time=$(date +%s.%N)
  local elapsed=$(echo "$end_time - $start_time" | bc)
  printf "Execution time: %.2f seconds\n" "$elapsed" >&2
}

### Main Execution ###

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/internet.sh"
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/curl.sh"
source "${SCRIPT_DIR}/lib/files.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

# Parse command line options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -v | --version)
      version
      exit 0
      ;;
    --verbose)
      export VERBOSE=true
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

# Check required commands
require_commands jq tee cat deepctl base64 sed mktemp cp gm dirname basename bc
require_vars DEEPINFRA_IMAGE_GENERATION_MODEL

# Execute main function with logging if enabled
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
