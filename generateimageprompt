#!/usr/bin/env bash
#
# Generate image prompts from text summaries using DeepSeek API
#
# Usage: generateimageprompt /path/to/DayXXXSummary.txt
# Output: Creates /path/to/DayXXXImagePrompt.json

set -euo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Source utility libraries
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/internet.sh"
source "${SCRIPT_DIR}/lib/util.sh"
source "${SCRIPT_DIR}/lib/curl.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

function usage() {
  local exit_code=${1:-0}
  local output_stream
  [[ $exit_code -eq 0 ]] && output_stream=1 || output_stream=2

  cat >&$output_stream << EOF
Usage: ${SCRIPT_NAME} INPUT_FILE

Generates an image prompt JSON file from a text summary using DeepSeek API.

Arguments:
  INPUT_FILE    Path to DayXXXSummary.txt file

Environment variables required:
  DEEPSEEK_API_KEY           API key for DeepSeek service
  SUMMARY_IMAGE_META_PROMPT  System prompt for image generation
  TEMPERATURE                Creativity parameter (0-2)

Examples:
  ${SCRIPT_NAME} /path/to/Day123Summary.txt
  DEEPSEEK_API_KEY=abc123 ${SCRIPT_NAME} Day456Summary.txt
EOF

  exit "$exit_code"
}

function version() {
  printf "%s\n" "$VERSION"
}

function validate_input() {
  [[ $# -eq 0 ]] && die "Error: No input file provided"
  [[ -f "$1" ]] || die "Error: Input file '$1' not found"
  [[ -n "${DEEPSEEK_API_KEY:-}" ]] || die "Error: DEEPSEEK_API_KEY not set"
  [[ -n "${SUMMARY_IMAGE_META_PROMPT:-}" ]] || die "Error: SUMMARY_IMAGE_META_PROMPT not set"
}

function generate_output_filename() {
  local input_file="$1"
  printf "%s" "${input_file/Summary.txt/ImagePrompt.json}"
}

function create_payload() {
  local summary_content="$1"
  local meta_prompt
  meta_prompt="$(jq -Rs <<< "$SUMMARY_IMAGE_META_PROMPT")"

  jq -n \
    --arg system "$meta_prompt" \
    --arg content "$summary_content" \
    --argjson temperature "${TEMPERATURE:-1}" \
    '{
      "model": "deepseek-chat",
      "messages": [
        {
          "role": "system",
          "content": $system
        },
        {
          "role": "user",
          "content": $content
        }
      ],
      "temperature": $temperature
    }'
}

function main() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help) usage 0 ;;
      -v | --version)
        version
        exit 0
        ;;
      --)
        shift
        break
        ;;
      -*) usage 1 ;;
      *) break ;;
    esac
  done

  validate_input "$@"
  local input_file="$1"
  local output_file
  local summary_content
  local payload
  local response
  local generated_content

  output_file="$(generate_output_filename "$input_file")"
  summary_content="$(< "$input_file")"
  payload="$(create_payload "$summary_content")"

  response="$(
    curl::safe_curl_request \
      "https://api.deepseek.com/chat/completions" \
      "POST" \
      "Authorization: Bearer ${DEEPSEEK_API_KEY}
Content-Type: application/json" \
      "$payload"
  )"

  generated_content="$(echo "$response" | jq -r '.choices[0].message.content')"
  echo "$generated_content" | sed -E '/^```(json)?[[:space:]]*$/d' >| "$output_file"

  out "Image prompt generated and saved to $output_file"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands jq tee cat
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
