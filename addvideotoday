#!/usr/bin/env bash

# Script to add YouTube video metadata to daily markdown files
# Usage: addvideotoday <video_id> <day_number>

set -eEuo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Error codes
readonly E_INVALID_ARGS=1
readonly E_INVALID_DAY=2
readonly E_MISSING_TOOLS=3
readonly E_NO_INTERNET=4
readonly E_MISSING_ENV=5
readonly E_MISSING_FILE=6
readonly E_VIDEO_NOT_FOUND=7
readonly E_THUMBNAIL_ERROR=8
readonly E_METADATA_FETCH_FAILED=9
readonly E_IMAGE_PROCESSING_FAILED=10
readonly E_FILE_BACKUP_FAILED=11
readonly E_FILE_GENERATION_FAILED=12
readonly E_INVALID_VIDEO_ID=13
readonly E_DIRECTORY_CREATION_FAILED=14

# Load required libraries
readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh" || exit 1
source "${SCRIPT_DIR}/lib/internet.sh" || exit 1
source "${SCRIPT_DIR}/lib/util.sh" || exit 1
source "${SCRIPT_DIR}/lib/git.sh" || exit 1
source "${SCRIPT_DIR}/lib/youtube.sh" || exit 1
source "${SCRIPT_DIR}/lib/vidmd.sh" || exit 1
source "${SCRIPT_DIR}/lib/date.sh" || exit 1
source "${SCRIPT_DIR}/lib/imageprompt.sh" || exit 1
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

trap trap_exit EXIT

trap_exit() {
  local exitcode="$?"
  echo "Exiting..."
  exit $exitcode
}

function usage() {
  local exit_code=${1:-0}
  local output
  if [ "$exit_code" -eq 0 ]; then
    output=1
  else
    output=2
  fi

  >&"$output" printf "Usage: %s <video_id> <day_number>\n" "$(basename "$0")"
  >&"$output" printf "Adds YouTube video metadata to daily markdown files.\n"
  >&"$output" printf "  <video_id>   The YouTube video ID (11 characters).\n"
  >&"$output" printf "  <day_number> The day number (1-366).\n\n"
  >&"$output" printf "Exit codes:\n"
  >&"$output" printf "  %d - Invalid arguments\n" "$E_INVALID_ARGS"
  >&"$output" printf "  %d - Invalid day number\n" "$E_INVALID_DAY"
  >&"$output" printf "  %d - Missing required tools\n" "$E_MISSING_TOOLS"
  >&"$output" printf "  %d - No internet connection\n" "$E_NO_INTERNET"
  >&"$output" printf "  %d - Missing required environment variables\n" "$E_MISSING_ENV"
  >&"$output" printf "  %d - Markdown file not found\n" "$E_MISSING_FILE"
  >&"$output" printf "  %d - Video not found on YouTube\n" "$E_VIDEO_NOT_FOUND"
  >&"$output" printf "  %d - Thumbnail download/processing failed\n" "$E_THUMBNAIL_ERROR"
  >&"$output" printf "  %d - Failed to fetch video metadata\n" "$E_METADATA_FETCH_FAILED"
  >&"$output" printf "  %d - Image processing failed\n" "$E_IMAGE_PROCESSING_FAILED"
  >&"$output" printf "  %d - File backup failed\n" "$E_FILE_BACKUP_FAILED"
  >&"$output" printf "  %d - Invalid video ID format\n" "$E_INVALID_VIDEO_ID"
  >&"$output" printf "  %d - Failed to create directory\n" "$E_DIRECTORY_CREATION_FAILED"
  >&"$output" printf "\nExample: %s ABCDEF12345 42\n" "$(basename "$0")"
  exit "$exit_code"
}

function version() {
  printf "%s\n" "$VERSION"
}

function validate_arguments() {
  if ! validators::validate_arg_count "$#" 2; then
    usage $E_INVALID_ARGS
  fi

  if ! [[ "$1" =~ ^[a-zA-Z0-9_-]{11}$ ]]; then
    die "Error: Invalid video ID format (must be 11 characters)" $E_INVALID_VIDEO_ID
  fi

  # shellcheck disable=SC2153
  if ! date::validate_daynumber "$2" "$YEAR"; then
    usage $E_INVALID_DAY
  fi
}

function fetch_video_metadata() {
  local video_id=$1
  local api_key=$2
  local api_url="https://www.googleapis.com/youtube/v3/videos?part=snippet&id=$video_id&key=$api_key"

  curl -s "$api_url" || die "Failed to fetch video metadata" $E_METADATA_FETCH_FAILED
}

function extract_thumbnail_url() {
  jq -r '.items[0].snippet.thumbnails | to_entries | sort_by(.value.width) | last.value.url' \
    || die "Failed to extract thumbnail URL" $E_METADATA_FETCH_FAILED
}

function extract_video_title() {
  jq -r '.items[0].snippet.title' \
    || die "Failed to extract video title" $E_METADATA_FETCH_FAILED
}

function download_thumbnail() {
  local url=$1
  local output_path=$2
  curl -s "$url" -o "$output_path" || return $E_THUMBNAIL_ERROR
}

function backup_file() {
  local file_path=$1
  cp "$file_path" "${file_path}.bak" || return $E_FILE_BACKUP_FAILED
  out "Saving backup to ${file_path}.bak"
}

function remove_existing_video_entry() {
  local file_path=$1
  local video_id=$2
  local tmp_file

  tmp_file=$(mktemp) || die "Failed to create temporary file" $E_FILE_BACKUP_FAILED

  # remove AI generated content
  awk -v vid="$video_id" '
  BEGIN { skip = 0 }
  {
    if (skip) {
      if ($0 ~ /^### /) {
        skip = 0
        print
      }
      next
    }
    if (found) {
      found = 0
      if ($0 ~ /^[[:space:]]*$/) {
        next
      } else if ($0 ~ /^### AI-Generated Summary:/) {
        skip = 1
        next
      } else if ($0 ~ /^### AI-Generated Image:/) {
        skip = 1
        next
    }
    if (index($0, vid)) {
      found = 1
      next
    }
    print
  }' "$file_path" > "$tmp_file" || return $E_FILE_BACKUP_FAILED

  mv "$tmp_file" "$file_path" || return $E_FILE_BACKUP_FAILED
}

function append_video_info() {
  local file_path=$1
  local title=$2
  local image_path=$3
  local youtube_url=$4
  local video_id=$5
  local doy=$6
  summaryfname="${file_path%%.*}${video_id}Summary.txt"
  summarypromptfname="${file_path%%.*}${video_id}ImagePrompt.json"
  {
    printf "\n### %s\n\n" "$title"
    vidmd::videomarkdown "$title" "/${image_path}" "$youtube_url"
    echo
    "${SCRIPT_DIR}/summarizevideo" -- "$video_id" >| "$summaryfname" \
      && "${SCRIPT_DIR}/generateimageprompt" -- "$summaryfname" >| "$summarypromptfname" \
      && cat "$summaryfname" || exit $E_FILE_GENERATION_FAILED
  } >> "$file_path" || die "Failed to append video info" $E_FILE_BACKUP_FAILED
  # generate image from summary prompt
  json="$(cat "${summarypromptfname}")" \
    && prompt="$(imageprompt::get_prompt "$json")" \
    && caption="$(imageprompt::get_caption "$json")" \
    && generatedimage="$("${SCRIPT_DIR}/generateimagefromprompt" "$prompt")" \
    && jpegfname="${month}/jpgs/Day$(printf "%03d" "${doy#0}")${video_id}Summary.jpg" \
    && cp "$generatedimage" "$jpegfname" &> /dev/null \
    && "${SCRIPT_DIR}/addimgtoday" "$jpegfname" "AI-Generated Image: ${caption}" "$doy" \
    && rm -f "$generatedimage" || exit $E_FILE_GENERATION_FAILED

}

function main() {
  validate_arguments "$@"
  local video_id=$1
  local day_num=$2
  local month day_string markdown_file image_path
  local api_key response thumbnail_url title youtube_url

  require_vars YEAR YOUTUBE_API_KEY || exit $E_MISSING_ENV

  internet::checkinternet || exit $E_NO_INTERNET

  api_key="$YOUTUBE_API_KEY"

  printf -v day_string "Day%03d" "$day_num"
  # shellcheck disable=SC2153
  month=$(date -d "${YEAR}-01-01 +$((day_num - 1)) days" +"%B")

  markdown_file="$month/${day_string}.md"
  image_path="$month/jpgs/${video_id}.jpg"

  if [ ! -f "$markdown_file" ]; then
    die "Error: Markdown file $markdown_file does not exist" $E_MISSING_FILE
  fi

  mkdir -p "$month/jpgs" || die "Failed to create directory" $E_DIRECTORY_CREATION_FAILED

  if youtube::check_video_exists "$video_id"; then
    response=$(fetch_video_metadata "$video_id" "$api_key")
    thumbnail_url=$(printf "%s" "$response" | extract_thumbnail_url)
    title=$(printf "%s" "$response" | extract_video_title)

    if [ -z "$thumbnail_url" ] || [ "$thumbnail_url" = "null" ]; then
      die "Error: Thumbnail not found for video ID $video_id" $E_THUMBNAIL_ERROR
    fi

    download_thumbnail "$thumbnail_url" "$image_path" || exit $E_THUMBNAIL_ERROR
    vidmd::overlayicon "$image_path" || exit $E_IMAGE_PROCESSING_FAILED
    youtube_url="https://youtu.be/$video_id"

    backup_file "$markdown_file" || exit $E_FILE_BACKUP_FAILED

    if grep -Fq "$video_id" "$markdown_file"; then
      remove_existing_video_entry "$markdown_file" "$video_id" || exit $E_FILE_BACKUP_FAILED
    fi

    append_video_info "$markdown_file" "$title" \
      "$image_path" "$youtube_url" "$video_id" "$day_num" || exit $E_FILE_BACKUP_FAILED

    out "Appended video info to $markdown_file"
  else
    die "Error: Video with id ${video_id} does not exist." $E_VIDEO_NOT_FOUND
  fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help) usage 0 ;;
      -v | --version)
        version
        exit 0
        ;;
      -d | --debug)
        set -x
        shift
        ;;
      *) break ;;
    esac
  done
  require_commands tee date jq curl git mv rm cp mktemp grep mkdir || exit $E_MISSING_TOOLS
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
