#!/usr/bin/env bash

# Script to add YouTube video metadata to daily markdown files
# Usage: addvideotoday <video_id> <day_number>

readonly VERSION="1.0.0"

# Load required libraries
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)
source "${SCRIPT_DIR}/require.sh" || exit 1
source "${SCRIPT_DIR}/util.sh" || exit 1
source "${SCRIPT_DIR}/git.sh" || exit 1

function usage() {
  local exit_code=${1:-0}
  local output=${exit_code:-1}
  if [ "$exit_code" -eq 0 ]; then
    output=1
  else
    output=2
  fi

  >&"$output" printf "Usage: %s <video_id> <day_number>\n" "$(basename "$0")"
  >&"$output" printf "Example: %s ABCDEF12345 42\n" "$(basename "$0")"
  exit "$exit_code"
}

function version() {
  printf "%s\n" "$VERSION"
}

function validate_arguments() {
  if [ $# -ne 2 ]; then
    err "Error: Invalid number of arguments"
    usage 1
  fi
}

function check_required_tools() {
  require_commands jq curl git
}

function fetch_video_metadata() {
  local video_id=$1
  local api_key=$2
  local api_url="https://www.googleapis.com/youtube/v3/videos?part=snippet&id=$video_id&key=$api_key"

  curl -s "$api_url"
}

function extract_thumbnail_url() {
  jq -r '.items[0].snippet.thumbnails | to_entries | sort_by(.value.width) | last.value.url'
}

function extract_video_title() {
  jq -r '.items[0].snippet.title'
}

function download_thumbnail() {
  local url=$1
  local output_path=$2
  curl -s "$url" -o "$output_path"
}

function backup_file() {
  local file_path=$1
  cp "$file_path" "${file_path}.bak"
  out "Saving backup to ${file_path}.bak"
}

function remove_existing_video_entry() {
  local file_path=$1
  local video_id=$2
  local tmp_file

  tmp_file=$(mktemp)

  awk -v vid="$video_id" '
  BEGIN { skip = 0 }
  {
    if (skip) {
      if ($0 ~ /^### /) {
        skip = 0
        print
      }
      next
    }
    if (found) {
      found = 0
      if ($0 ~ /^[[:space:]]*$/) {
        next
      } else if ($0 ~ /^### AI-Generated Summary:/) {
        skip = 1
        next
      }
    }
    if (index($0, vid)) {
      found = 1
      next
    }
    print
  }' "$file_path" > "$tmp_file"

  mv "$tmp_file" "$file_path"
}

function append_video_info() {
  local file_path=$1
  local title=$2
  local github_repo=$3
  local month=$4
  local day_string=$5
  local youtube_url=$6
  local script_dir=$7
  local video_id=$8

  {
    printf "\n### %s\n\n" "$title"
    printf "[![%s](https://raw.githubusercontent.com/%s/refs/heads/main/%s/jpgs/%s.jpg)](%s \"%s\")\n" \
      "$title" "$github_repo" "$month" "$day_string" "$youtube_url" "$title"
    echo
    "${script_dir}/summarizevideo" "$video_id"
  } >> "$file_path"
}

function main() {
  validate_arguments "$@"
  local video_id=$1
  local day_num=$2
  local script_dir month day_string markdown_file image_path
  local api_key github_repo response thumbnail_url title youtube_url

  check_required_tools

  source "${SCRIPT_DIR}/lockconfig.sh"
  lock_config_vars "${SCRIPT_DIR}/config.env"

  require_vars YEAR YOUTUBE_API_KEY

  api_key="$YOUTUBE_API_KEY"
  github_repo=$(get_github_repo)

  printf -v day_string "Day%03d" "$day_num"
  month=$(date -d "${YEAR}-01-01 +$((day_num - 1)) days" +"%B")

  markdown_file="$month/${day_string}.md"
  image_path="$month/jpgs/${day_string}.jpg"

  if [ ! -f "$markdown_file" ]; then
    die "Error: Markdown file $markdown_file does not exist"
  fi

  mkdir -p "$month/jpgs"

  response=$(fetch_video_metadata "$video_id" "$api_key")
  thumbnail_url=$(printf "%s" "$response" | extract_thumbnail_url)
  title=$(printf "%s" "$response" | extract_video_title)

  if [ -z "$thumbnail_url" ] || [ "$thumbnail_url" = "null" ]; then
    die "Error: Thumbnail not found for video ID $video_id"
  fi

  download_thumbnail "$thumbnail_url" "$image_path"
  youtube_url="https://youtu.be/$video_id"

  backup_file "$markdown_file"

  if grep -Fq "$video_id" "$markdown_file"; then
    remove_existing_video_entry "$markdown_file" "$video_id"
  fi

  append_video_info "$markdown_file" "$title" "$github_repo" "$month" \
    "$day_string" "$youtube_url" "$SCRIPT_DIR" "$video_id"

  out "Appended video info to $markdown_file"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help) usage 0 ;;
      -v | --version)
        version
        exit 0
        ;;
      *) break ;;
    esac
  done
  main "$@"
fi
