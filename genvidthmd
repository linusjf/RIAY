#!/usr/bin/env bash
######################################################################
# Video Thumbnail Markdown Generator
# Wrapper script for vidmd.sh that generates markdown for videos
# Supports both standard and day-of-year specific thumbnails
######################################################################

set -euo pipefail
shopt -s inherit_errexit

# shellcheck disable=SC2155
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
readonly VIDMD_SCRIPT="${SCRIPT_DIR}/vidmd.sh"

######################################################################
# Display usage information
# Globals: None
# Arguments: None
# Outputs: Usage message to STDOUT
# Returns: None (exits with status 1)
######################################################################
usage() {
  cat << EOF
Usage: $0 [-d|--debug] vid vidurl caption [doy]
Options:
  -d, --debug      Enable debug output
Arguments:
  vid      - YouTube video ID
  vidurl   - YouTube video URL
  caption  - Video title
  doy      - (Optional) Day of the year (numeric)
EOF
  exit 1
}

######################################################################
# Verify required commands are available
# Globals: None
# Arguments:
#   $@ - Commands to check
# Outputs: Error message to STDERR if command missing
# Returns: None (exits with status 1 if command missing)
######################################################################
require() {
  for cmd in "$@"; do
    if ! command -v "$cmd" > /dev/null 2>&1; then
      die "Required command '$cmd' not found"
    fi
  done
}

######################################################################
# Main function
# Globals:
#   SCRIPT_DIR
#   VIDMD_SCRIPT
# Arguments:
#   $@ - Command line arguments
# Outputs: Generated markdown to STDOUT
# Returns: None (exits with status 1 on error)
######################################################################
main() {
  # Verify vidmd.sh exists
  if [[ ! -f "${VIDMD_SCRIPT}" ]]; then
    die "Error: Required script '${VIDMD_SCRIPT}' not found"
  fi

  # Source vidmd.sh functions
  # shellcheck disable=SC1090
  source "${VIDMD_SCRIPT}"

  # Validate arguments
  if [[ $# -lt 3 ]]; then
    usage
  fi

  local vid="$1"
  local vidurl="$2"
  local caption="$3"
  local doy="${4:-}"

  # Validate video URL format
  if [[ ! "$vidurl" =~ ^https?:// ]]; then
    die "Error: Invalid video URL format"
  fi

  # Validate day of year if provided
  if [[ -n "$doy" ]]; then
    if ! isnumeric "$doy"; then
      die "Error: 'doy' must be a numeric value"
    fi
    vidmdloc "$vid" "$vidurl" "$caption" "$doy"
  else
    vidmd "$vid" "$vidurl" "$caption"
  fi
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --debug)
      set -x
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require curl
  main "$@"
fi
