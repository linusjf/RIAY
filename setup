#!/usr/bin/env bash

set -euo pipefail
shopt -s inherit_errexit

# Setup script for creating monthly directories and files
# Creates videos file and monthly folders with header.md files

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Exit codes
readonly EXIT_SUCCESS=0
readonly EXIT_GENERAL_ERROR=1
readonly EXIT_INVALID_INPUT=2
readonly EXIT_FILE_EXISTS=3
readonly EXIT_DIR_EXISTS=4
readonly EXIT_CONFIG_ERROR=5
readonly EXIT_YEAR_NOT_SET=6

overwrite_all=false
skip_all=false

readonly MONTHS=(January February March April May June July August September October November December)

function usage() {
  cat << EOF
Usage: $SCRIPT_NAME

Setup script for creating monthly directories and files.

Exit codes:
  $EXIT_SUCCESS          - Success
  $EXIT_GENERAL_ERROR    - General error
  $EXIT_INVALID_INPUT    - Invalid user input
  $EXIT_FILE_EXISTS      - File already exists (when not overwriting)
  $EXIT_DIR_EXISTS       - Directory already exists
  $EXIT_CONFIG_ERROR     - Configuration error
  $EXIT_YEAR_NOT_SET     - YEAR environment variable not set

Options:
  --version   Show version
  --help      Show this help
EOF
}

function version() {
  printf "%s\n" "$VERSION"
}

function backup_file() {
  local file="$1"
  local timestamp=$(date +"%Y%m%d_%H%M%S")
  local backup_file="${file}.bak_${timestamp}"
  cp "$file" "$backup_file"
  echo "Backed up $file to $backup_file"
}

function confirm_overwrite() {
  local file="${1}"

  # Check if overwrite_all is set
  if [[ "${overwrite_all}" == true ]]; then
    echo "Overwriting ${file} (Overwrite All is set)"
    return 0
  fi

  # Check if skip_all is set
  if [[ "${skip_all}" == true ]]; then
    echo "Skipping ${file} (Skip All is set)"
    return 1
  fi

  read -p "File ${file} already exists. Overwrite? [y/N/A/S] " -n 1 -r
  echo

  case "${REPLY}" in
    [Yy]*)
      return 0 # True: Overwrite
      ;;
    [Nn]*)
      return $EXIT_FILE_EXISTS # False: Don't overwrite
      ;;
    [Aa]*)
      overwrite_all=true
      echo "Overwrite All set for remaining files"
      return 0 # True: Overwrite this file and all subsequent
      ;;
    [Ss]*)
      skip_all=true
      echo "Skip All set for remaining files"
      return $EXIT_FILE_EXISTS # False: Skip this file and all subsequent
      ;;
    *)
      echo "Invalid input. Skipping ${file}."
      return $EXIT_INVALID_INPUT # Default: Don't overwrite
      ;;
  esac
}

function setup_directories() {
  local year="$1"
  local dir

  # Check and create videos file
  if [[ -f "$VIDEOS_FILE" ]]; then
    if ! confirm_overwrite "$VIDEOS_FILE"; then
      echo "Skipping $VIDEOS_FILE"
      return $EXIT_FILE_EXISTS
    fi
    backup_file "$VIDEOS_FILE"
    : > "$VIDEOS_FILE"
  else
    : > "$VIDEOS_FILE"
  fi

  # Create monthly directories and files
  for month in "${MONTHS[@]}"; do
    dir="./$month"

    # Check if directory exists
    if [[ -d "$dir" ]]; then
      echo "Directory $dir already exists"
      return $EXIT_DIR_EXISTS
    else
      mkdir -p "$dir" || return $EXIT_GENERAL_ERROR
    fi

    # Check header.md
    if [[ -f "$dir/header.md" ]]; then
      if ! confirm_overwrite "$dir/header.md"; then
        echo "Skipping $dir/header.md"
        return $EXIT_FILE_EXISTS
      fi
      backup_file "$dir/header.md"
      create_header_file "$dir" "$month" "$year"
    else
      create_header_file "$dir" "$month" "$year"
    fi

    # Check compact file
    if [[ -f "$dir/${COMPACT_FILE}" ]]; then
      if ! confirm_overwrite "$dir/${COMPACT_FILE}"; then
        echo "Skipping $dir/${COMPACT_FILE}"
        return $EXIT_FILE_EXISTS
      fi
      backup_file "$dir/${COMPACT_FILE}"
      echo "header.md" > "$dir/${COMPACT_FILE}"
    else
      echo "header.md" > "$dir/${COMPACT_FILE}"
    fi
  done
}

function create_header_file() {
  local dir="$1"
  local month="$2"
  local year="$3"

  cat > "$dir/header.md" << EOF
<!-- toc -->
<!-- tocstop -->
$month $year

RIAY $month $year
EOF
}

function main() {
  : "${YEAR:?Environment variable YEAR must be set}" || exit $EXIT_YEAR_NOT_SET

  setup_directories "$YEAR" || exit $?
  printf "Setup complete: ${VIDEOS_FILE} plus folders and headers for each month for year %s.\n" "$YEAR"
  exit $EXIT_SUCCESS
}

# Resolve script directory
if command -v realpath > /dev/null 2>&1; then
  readonly SCRIPT_DIR="$(dirname "$(realpath "$0")")"
else
  readonly SCRIPT_DIR="$(cd -- "$(dirname -- "$0")" && pwd -P)"
fi
source "${SCRIPT_DIR}/lib/require.sh"
source "${SCRIPT_DIR}/lib/lockconfig.sh" || exit $EXIT_CONFIG_ERROR
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env" || exit $EXIT_CONFIG_ERROR

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  require_commands date tee cat cp mkdir
  if "$LOGGING"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
