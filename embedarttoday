#!/usr/bin/env bash

# Embed artwork image in content for specified day
# Searches for and verifies artwork images, then generates markdown content
# and appends it to the day's markdown file.

set -eEuo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Error codes
readonly E_INVALID_ARGS=1
readonly E_INVALID_DAY=2
readonly E_MISSING_TOOLS=3
readonly E_NO_INTERNET=4
readonly E_MISSING_ENV=5
readonly E_MISSING_FILE=6
readonly E_NO_SATISFACTORY_IMAGES=7
readonly E_NO_ART_REFERENCED=8

# Load required libraries
readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &> /dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh" || exit 1
source "${SCRIPT_DIR}/lib/internet.sh" || exit 1
source "${SCRIPT_DIR}/lib/util.sh" || exit 1
source "${SCRIPT_DIR}/lib/git.sh" || exit 1
source "${SCRIPT_DIR}/lib/youtube.sh" || exit 1
source "${SCRIPT_DIR}/lib/vidmd.sh" || exit 1
source "${SCRIPT_DIR}/lib/date.sh" || exit 1
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

###############################################################################
# Functions
###############################################################################

function version() {
  printf "%s\n" "$VERSION"
}

function usage() {
  local exit_code=${1:-0}
  local output
  if [ "$exit_code" -eq 0 ]; then
    output=1
  else
    output=2
  fi

  >&"$output" printf "Usage: %s <day_number>\n" "$SCRIPT_NAME"
  >&"$output" printf "Embeds artwork image in content for the day.\n"
  >&"$output" printf "\nArguments:\n"
  >&"$output" printf "  <day_number> The day number (1-366)\n"
  >&"$output" printf "\nOptions:\n"
  >&"$output" printf "  -h, --help     Show this help message\n"
  >&"$output" printf "  -v, --version  Show version\n"
  >&"$output" printf "  -d, --debug    Enable debug mode\n"
  >&"$output" printf "\nExamples:\n"
  >&"$output" printf "  %s 42\n" "$SCRIPT_NAME"
  >&"$output" printf "  %s 100 --debug\n" "$SCRIPT_NAME"
  exit "$exit_code"
}

function validate_arguments() {
  if ! validators::validate_arg_count "$#" 1; then
    usage $E_INVALID_ARGS
  fi

  # shellcheck disable=SC2153
  if ! date::validate_daynumber "$1" "$YEAR"; then
    usage $E_INVALID_DAY
  fi
}

function parse_artdownloader_output() {
  local output="$1"
  local best_selected_image=""
  local _best_score=0

  while IFS= read -r line; do
    if [[ "$line" == *"⭐ Best available image (downloaded):"* ]]; then
      best_selected_image=$(echo "$line" | awk -F': ' '{print $2}' | awk '{print $1}')
      _best_score=$(echo "$line" | grep -oP '(?<=score: )\d+\.\d+')
    elif [[ "$line" == *"⭐ Best Wikipedia image:"* ]]; then
      best_selected_image=$(echo "$line" | awk -F': ' '{print $2}' | awk '{print $1}')
      _best_score=$(echo "$line" | grep -oP '(?<=score: )\d+\.\d+')
    fi
  done <<< "$output"

  echo "$best_selected_image"
}

function verify_image() {
  local file="${1:-}"
  local verifier="${ART_VERIFIER_SCRIPT}"
  local exitcode=0

  if [ -z "${file:-}" ]; then
    err "No image files found to verify"
    return 1
  fi

  local score
  err "Verifying image: $file"

  if result=$("${SCRIPT_DIR}/${verifier}" --image "$file" --title "${title:-}" --artist "${artist:-}" --subject "${subject:-}" \
    --location "${location:-}" --style "${style:-}" --medium "${medium:-}" --date "${date:-}"); then
    score="$(echo "$result" | jq -r '.cosine_score')"
    err "Verification passed for: ${file} (score: ${score})"
  else
    err "Verification failed for: ${file}"
    exitcode=1
  fi

  err "Best image: $file (score: ${score:-})"
  echo "$result" | jq --arg k "filename" --arg v "$file" '. + {($k):($v)}'
  return "$exitcode"
}

function generate_markdown() {
  local caption="$1"
  local image_path="$2"
  local source_url="$3"
  local month="$4"
  local day_num="$5"
  local is_stock_image="$6"

  if "$is_stock_image"; then
    header="### ${caption} (Stock Image)"
  else
    header="### ${caption}"
  fi

  local video_md
  video_md=$(vidmd::videomarkdown "$caption" "$image_path" "$source_url")

  printf "\n%s\n\n%s" "$header" "$video_md"
}

function append_to_day_file() {
  local day_num="$1"
  local content="$2"
  local month="$3"

  printf -v day_string "Day%03d" "$day_num"
  local day_file="$month/${day_string}.md"

  if [[ ! -f "$day_file" ]]; then
    die "Day file $day_file does not exist" $E_MISSING_FILE
  fi

  echo "$content" >> "$day_file"
  err "Appended artwork to: $day_file"
}

function trap_exit() {
  local exitcode="$?"
  exit $exitcode
}

function main() {
  local start_time=$(date +%s)
  validate_arguments "$@"
  local day_num=$1
  local month day_string summary_file

  require_vars YEAR ART_DOWNLOADER_DIR VERIFY_ART_IMAGES IMAGE_CONTENT_VALIDATION ART_VERIFIER_SCRIPT || exit $E_MISSING_ENV

  internet::checkinternet || exit $E_NO_INTERNET
  printf -v day_string "Day%03d" "$day_num"
  month=$(date -d "${YEAR}-01-01 +$((day_num - 1)) days" +"%B")

  summary_file="$month/${day_string}Summary.txt"
  if [ ! -f "$summary_file" ]; then
    die "Summary file $summary_file does not exist" $E_MISSING_FILE
  fi

  if art_details="$("${SCRIPT_DIR}/extractartdetails" "$summary_file" | "${SCRIPT_DIR}/augmentartdetails.py")"; then
    title="$(echo "$art_details" | jq '.details.title' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g')"
    original_title="$(echo "$art_details" | jq '.details.original_title' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g')"
    language="$(echo "$art_details" | jq '.details.title_language_iso' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g')"
    artist="$(echo "$art_details" | jq '.details.artist' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
    location="$(echo "$art_details" | jq '.details.location' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
    date="$(echo "$art_details" | jq '.details.date' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
    style="$(echo "$art_details" | jq '.details.style' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
    medium="$(echo "$art_details" | jq '.details.medium' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
    subject="$(echo "$art_details" | jq '.details.subject' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
    filename="$(echo "$art_details" | jq '.filename' | sed 's/"//g')"
    caption="$(echo "$art_details" | jq '.caption' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"

    local downloader_output
    downloader_output="$("${SCRIPT_DIR}/artdownloader.py" --filename "$filename" --title "${title:-}" --original_title "${original_title:-}" --language "${language:-}" \
      --artist "${artist:-}" --location "${location:-}" \
      --medium "${medium:-}" --subject "${subject:-}" --style "${style:-}" --date "${date:-}")"

    printf "%s\n" "$downloader_output"

    local best_selected_image
    best_selected_image=$(parse_artdownloader_output "$downloader_output")
    local is_stock_image=false

    if [[ "$best_selected_image" == *"best_result"* ]]; then
      is_stock_image=true
      err "Selected image is from stock image site"
    fi

    local jsonresult
    local generate_markdown=true

    if [[ "${IMAGE_CONTENT_VALIDATION:-"lenient"}" == lenient ]]; then
      generate_markdown=true
    else
      generate_markdown=false
    fi

    if [[ -n "${best_selected_image:-}" ]]; then
      if "${VERIFY_ART_IMAGES:-false}"; then
        jsonresult="$(verify_image "${best_selected_image}")"
        local image_color="$(echo "$jsonresult" | jq -r '.image_color')"
        if [[ "$image_color" == *Grayscale* ]] || [[ "$image_color" == *Black-and-white* ]] || [[ "$image_color" == *Sepia* ]]; then
          err "Image color is ${image_color}"
        fi

        local watermarked="$(echo "$jsonresult" | jq -r '.watermarked')"
        if [[ "$watermarked" =~ ^[Yy] ]]; then
          if [[ ! "${best_selected_image}" == *wikipedia* ]] && [[ ! "${best_selected_image}" == *wikimedia* ]]; then
            err "Image is watermarked"
            is_stock_image=true
          fi
        fi
      fi

      if "$generate_markdown"; then
        local url_file="${best_selected_image%.*}.url.txt"
        local source_url=""

        if [[ -f "$url_file" ]]; then
          source_url=$(cat "$url_file")
        else
          err "No companion URL file found"
        fi

        local target_dir="$month/jpgs"
        mkdir -p "$target_dir"
        local target_file="$target_dir/${filename}.jpg"
        cp "$best_selected_image" "$target_file"

        if [[ -n "$source_url" ]]; then
          echo "$source_url" > "$target_dir/${filename}.url.txt"
        fi

        local markdown_content
        markdown_content="$(generate_markdown "$caption" "$target_file" "$source_url" "$month" "$day_num" "$is_stock_image")"
        append_to_day_file "$day_num" "$markdown_content" "$month"
        "${SCRIPT_DIR}/genmonth" "$(date::monthnumberfrommonth "$month")" && "${SCRIPT_DIR}/stitch"

        local end_time=$(date +%s)
        local runtime=$((end_time - start_time))
        err "Completed in ${runtime} seconds"
        return 0
      else
        err "Image content validation policy is set to strict"
      fi
    else
      err "No satisfactory images found via search"
      return $E_NO_SATISFACTORY_IMAGES
    fi
  else
    err "No art details found in summary"
    return $E_NO_ART_REFERENCED
  fi
}

###############################################################################
# Main execution
###############################################################################

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help) usage 0 ;;
      -v | --version)
        version
        exit 0
        ;;
      -d | --debug)
        set -x
        shift
        ;;
      *) break ;;
    esac
  done

  require_commands tee date jq cp ls bc || exit $E_MISSING_TOOLS

  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
