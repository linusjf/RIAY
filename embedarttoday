#!/usr/bin/env bash

# Usage: embedarttoday <day_number>

set -eEuo pipefail
shopt -s inherit_errexit

readonly VERSION="1.0.0"
readonly SCRIPT_NAME="$(basename "$0")"

# Error codes
readonly E_INVALID_ARGS=1
readonly E_INVALID_DAY=2
readonly E_MISSING_TOOLS=3
readonly E_NO_INTERNET=4
readonly E_MISSING_ENV=5
readonly E_MISSING_FILE=6
readonly E_VERIFICATION_FAILED=7
readonly E_NO_COLOR_IMAGES=8

# Load required libraries
readonly SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)"
source "${SCRIPT_DIR}/lib/require.sh" || exit 1
source "${SCRIPT_DIR}/lib/internet.sh" || exit 1
source "${SCRIPT_DIR}/lib/util.sh" || exit 1
source "${SCRIPT_DIR}/lib/git.sh" || exit 1
source "${SCRIPT_DIR}/lib/youtube.sh" || exit 1
source "${SCRIPT_DIR}/lib/vidmd.sh" || exit 1
source "${SCRIPT_DIR}/lib/date.sh" || exit 1
source "${SCRIPT_DIR}/lib/lockconfig.sh"
lockconfig::lock_config_vars "${SCRIPT_DIR}/config.env"

trap trap_exit EXIT

trap_exit() {
  local exitcode="$?"
  exit $exitcode
}

function usage() {
  local exit_code=${1:-0}
  local output
  if [ "$exit_code" -eq 0 ]; then
    output=1
  else
    output=2
  fi

  >&"$output" printf "Usage: %s <day_number>\n" "$(basename "$0")"
  >&"$output" printf "Embeds artwork image in content for the day.\n"
  >&"$output" printf "  <day_number> The day number (1-366).\n\n"
  >&"$output" printf "Exit codes:\n"
  >&"$output" printf "  %d - Invalid arguments\n" "$E_INVALID_ARGS"
  >&"$output" printf "  %d - Invalid day number\n" "$E_INVALID_DAY"
  >&"$output" printf "  %d - Missing required tools\n" "$E_MISSING_TOOLS"
  >&"$output" printf "  %d - No internet connection\n" "$E_NO_INTERNET"
  >&"$output" printf "  %d - Missing required environment variables\n" "$E_MISSING_ENV"
  >&"$output" printf "  %d - Summary file not found\n" "$E_MISSING_FILE"
  >&"$output" printf "  %d - Image verification failed\n" "$E_VERIFICATION_FAILED"
  >&"$output" printf "  %d - No full color images found\n" "$E_NO_COLOR_IMAGES"
  >&"$output" printf "\nExample: %s 42\n" "$(basename "$0")"
  exit "$exit_code"
}

function version() {
  printf "%s\n" "$VERSION"
}

function validate_arguments() {
  if ! validators::validate_arg_count "$#" 1; then
    usage $E_INVALID_ARGS
  fi

  # shellcheck disable=SC2153
  if ! date::validate_daynumber "$1" "$YEAR"; then
    usage $E_INVALID_DAY
  fi
}

function filter_color_images() {
  local files=("$@")
  local color_files=()

  for file in "${files[@]}"; do
    echo "üé® Checking color profile: $file"
    classification=$("${SCRIPT_DIR}/classifyimage" "$file")
    if [[ "$classification" == *"Full color"* ]]; then
      echo "‚úÖ Accepted: $file ($classification)"
      color_files+=("$file")
    else
      echo "‚ùå Rejected: $file ($classification)"
    fi
  done

  if [ ${#color_files[@]} -eq 0 ]; then
    err "‚ö†Ô∏è No full color images found"
    return $E_NO_COLOR_IMAGES
  fi

  echo "${color_files[@]}"
}

function verify_images() {
  local files=("$@")
  declare -A verified_files=()
  local best_file=""
  local best_score=0
  local verifier="verifyartimagews.py"
  if ${VERIFY_ART_LOCALLY}; then
    verifier="verifyartimage.py"
  fi

  if [ ${#files[@]} -eq 0 ]; then
    err "‚ö†Ô∏è No image files found to verify"
    return 0
  fi

  for file in "${files[@]}"; do
    echo "üîç Verifying image: $file"
    if result=$("${SCRIPT_DIR}/${verifier}" --image "$file" --title "${title:-}" --artist "${artist:-}" --subject "${subject:-}" --year "${year:-}" --medium "${medium:-}"); then
      score=$(echo "$result" | jq -r '.clip_score')
      verified_files["$file"]=$score
      err "‚úÖ Verification passed for: $file (score: $score)"
    else
      err "‚ùå Verification failed for: $file"
    fi
  done

  if [ ${#verified_files[@]} -eq 0 ]; then
    die "Error: No images passed verification" $E_VERIFICATION_FAILED
  fi

  # Find the file with highest score
  for file in "${!verified_files[@]}"; do
    score=${verified_files[$file]}
    if (($(echo "$score > $best_score" | bc -l))); then
      best_score=$score
      best_file=$file
    fi
  done

  err "üèÜ Best image: $best_file (score: $best_score)"
  echo "$best_file"
}

function select_best_unverified_image() {
  local filename="$1"
  local best_image=""

  # Check in order of preference
  for source in wikimedia wikimedia_search google duckduckgo; do
    local candidate="${ART_DOWNLOADER_DIR}/${filename}_${source}.jpg"
    if [[ -f "$candidate" ]]; then
      classification=$("${SCRIPT_DIR}/classifyimage" "$candidate")
      if [[ "$classification" == *"Full color"* || "$classification" == *"Visually Grayscale"* ]]; then
        best_image="$candidate"
        err "‚úÖ Found color image from ${source}: ${best_image}"
        break
      fi
    fi
  done

  if [[ -z "$best_image" ]]; then
    die "Error: No suitable color image found" $E_NO_COLOR_IMAGES
  fi

  echo "$best_image"
}

function generate_markdown() {
  local title="$1"
  local artist="$2"
  local image_path="$3"
  local source_url="$4"
  local month="$5"
  local day_num="$6"

  # Generate header
  local header
  if [[ -n "$artist" ]]; then
    header="### $title by $artist"
  else
    header="### $title"
  fi

  # Generate caption
  local caption
  if [[ -n "$artist" ]]; then
    caption="$title by $artist"
  else
    caption="$title"
  fi

  # Generate video markdown
  local video_md
  video_md=$(vidmd::videomarkdown "$caption" "$image_path" "$source_url")

  # Combine into final markdown
  printf "\n%s\n\n%s\n" "$header" "$video_md"
}

function append_to_day_file() {
  local day_num="$1"
  local content="$2"
  local month="$3"

  printf -v day_string "Day%03d" "$day_num"
  local day_file="$month/${day_string}.md"

  if [[ ! -f "$day_file" ]]; then
    die "Error: Day file $day_file does not exist" $E_MISSING_FILE
  fi

  echo "$content" >>"$day_file"
  echo "üìù Appended artwork to: $day_file"
}

function main() {
  validate_arguments "$@"
  local day_num=$1
  local month day_string summary_file

  require_vars YEAR ART_DOWNLOADER_DIR VERIFY_ART_LOCALLY VERIFY_ART_IMAGES || exit $E_MISSING_ENV

  internet::checkinternet || exit $E_NO_INTERNET
  printf -v day_string "Day%03d" "$day_num"
  # shellcheck disable=SC2153
  month=$(date -d "${YEAR}-01-01 +$((day_num - 1)) days" +"%B")

  summary_file="$month/${day_string}Summary.txt"
  if [ ! -f "$summary_file" ]; then
    die "Error: Summary file $summary_file does not exist" $E_MISSING_FILE
  fi
  art_details="$("${SCRIPT_DIR}/extractartdetails" "$summary_file")"
  title="$(echo "$art_details" | jq '.details.title' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g')"
  artist="$(echo "$art_details" | jq '.details.artist' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
  year="$(echo "$art_details" | jq '.details.year' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
  medium="$(echo "$art_details" | jq '.details.medium' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
  subject="$(echo "$art_details" | jq '.details.subject' | sed 's/,//g' | sed 's/\.//g' | sed 's/"//g' | sed 's/null//g')"
  filename="$(echo "$art_details" | jq '.filename' | sed 's/"//g')"
  "${SCRIPT_DIR}/artdownloader.py" --filename "$filename" --title "${title:-}" --artist "${artist:-}" --year "${year:-}" \
    --medium "${medium:-}" --subject "${subject:-}"

  if "${VERIFY_ART_IMAGES:-false}"; then
    # Capture ls output into array and verify each file
    # shellcheck disable=SC2086
    mapfile -t image_files < <(ls ${ART_DOWNLOADER_DIR}/${filename}*.jpg 2>/dev/null || true)
    # Filter for color images first
    color_files=$(filter_color_images "${image_files[@]}")
    if [ $? -eq $E_NO_COLOR_IMAGES ]; then
      die "Error: No full color images found" $E_NO_COLOR_IMAGES
    fi
    best_image=$(verify_images "${color_files[@]}")
  else
    best_image=$(select_best_unverified_image "$filename")
  fi
  echo "Selected image: $best_image"

  # Get source URL from companion .url file
  local url_file="${best_image%.*}.url"
  local source_url=""
  if [[ -f "$url_file" ]]; then
    source_url=$(cat "$url_file")
    echo "üìå Source URL: $source_url"
  else
    echo "‚ö†Ô∏è No companion URL file found for $best_image"
  fi

  # Copy image to month/jpgs directory without source suffix
  local target_dir="$month/jpgs"
  mkdir -p "$target_dir"
  local target_file="$target_dir/${filename}.jpg"
  cp "$best_image" "$target_file"
  echo "üìÅ Copied image to: $target_file"

  # Also copy URL file if it exists
  if [[ -n "$source_url" ]]; then
    echo "$source_url" >"$target_dir/${filename}.url"
    echo "üìù Saved source URL to: $target_dir/${filename}.url"
  fi

  # Generate and append markdown
  local markdown_content
  markdown_content=$(generate_markdown "$title" "$artist" "$target_file" "$source_url" "$month" "$day_num")
  append_to_day_file "$day_num" "$markdown_content" "$month"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help) usage 0 ;;
    -v | --version)
      version
      exit 0
      ;;
    -d | --debug)
      set -x
      shift
      ;;
    *) break ;;
    esac
  done
  require_commands tee date jq cp ls bc || exit $E_MISSING_TOOLS
  if "${LOGGING:-false}"; then
    timestamp=$(date +"%Y%m%d_%H%M%S")
    {
      main "$@" 2> >(tee -a "${SCRIPT_NAME%.*}_${timestamp}.stderr.log" >&2)
    } | tee -a "${SCRIPT_NAME%.*}_${timestamp}.stdout.log"
  else
    main "$@"
  fi
fi
